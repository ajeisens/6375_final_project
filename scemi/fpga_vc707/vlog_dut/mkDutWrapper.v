//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Mon Apr 18 18:33:19 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_putByteInput               O     1
// getByteOutput                  O     4
// RDY_getByteOutput              O     1
// RDY_doInit                     O     1 const
// ddr3client_request_get         O   601 reg
// RDY_ddr3client_request_get     O     1 reg
// RDY_ddr3client_response_put    O     1 reg
// RDY_setmode_put                O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putByteInput_in                I     4
// doInit_x                       I     1 reg
// ddr3client_response_put        I   512 reg
// setmode_put                    I     1 unused
// EN_putByteInput                I     1
// EN_doInit                      I     1
// EN_ddr3client_response_put     I     1
// EN_setmode_put                 I     1 unused
// EN_getByteOutput               I     1
// EN_ddr3client_request_get      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDutWrapper(CLK,
		    RST_N,

		    putByteInput_in,
		    EN_putByteInput,
		    RDY_putByteInput,

		    EN_getByteOutput,
		    getByteOutput,
		    RDY_getByteOutput,

		    doInit_x,
		    EN_doInit,
		    RDY_doInit,

		    EN_ddr3client_request_get,
		    ddr3client_request_get,
		    RDY_ddr3client_request_get,

		    ddr3client_response_put,
		    EN_ddr3client_response_put,
		    RDY_ddr3client_response_put,

		    setmode_put,
		    EN_setmode_put,
		    RDY_setmode_put);
  input  CLK;
  input  RST_N;

  // action method putByteInput
  input  [3 : 0] putByteInput_in;
  input  EN_putByteInput;
  output RDY_putByteInput;

  // actionvalue method getByteOutput
  input  EN_getByteOutput;
  output [3 : 0] getByteOutput;
  output RDY_getByteOutput;

  // action method doInit
  input  doInit_x;
  input  EN_doInit;
  output RDY_doInit;

  // actionvalue method ddr3client_request_get
  input  EN_ddr3client_request_get;
  output [600 : 0] ddr3client_request_get;
  output RDY_ddr3client_request_get;

  // action method ddr3client_response_put
  input  [511 : 0] ddr3client_response_put;
  input  EN_ddr3client_response_put;
  output RDY_ddr3client_response_put;

  // action method setmode_put
  input  setmode_put;
  input  EN_setmode_put;
  output RDY_setmode_put;

  // signals for module outputs
  wire [600 : 0] ddr3client_request_get;
  wire [3 : 0] getByteOutput;
  wire RDY_ddr3client_request_get,
       RDY_ddr3client_response_put,
       RDY_doInit,
       RDY_getByteOutput,
       RDY_putByteInput,
       RDY_setmode_put;

  // ports of submodule m
  wire [600 : 0] m$ddr3client_request_get;
  wire [511 : 0] m$ddr3client_response_put;
  wire [3 : 0] m$getByteOutput, m$putByteInput_in;
  wire m$EN_ddr3client_request_get,
       m$EN_ddr3client_response_put,
       m$EN_doInit,
       m$EN_getByteOutput,
       m$EN_putByteInput,
       m$EN_setmode_put,
       m$RDY_ddr3client_request_get,
       m$RDY_ddr3client_response_put,
       m$RDY_getByteOutput,
       m$RDY_putByteInput,
       m$doInit_x,
       m$setmode_put;

  // rule scheduling signals
  wire CAN_FIRE_ddr3client_request_get,
       CAN_FIRE_ddr3client_response_put,
       CAN_FIRE_doInit,
       CAN_FIRE_getByteOutput,
       CAN_FIRE_putByteInput,
       CAN_FIRE_setmode_put,
       WILL_FIRE_ddr3client_request_get,
       WILL_FIRE_ddr3client_response_put,
       WILL_FIRE_doInit,
       WILL_FIRE_getByteOutput,
       WILL_FIRE_putByteInput,
       WILL_FIRE_setmode_put;

  // action method putByteInput
  assign RDY_putByteInput = m$RDY_putByteInput ;
  assign CAN_FIRE_putByteInput = m$RDY_putByteInput ;
  assign WILL_FIRE_putByteInput = EN_putByteInput ;

  // actionvalue method getByteOutput
  assign getByteOutput = m$getByteOutput ;
  assign RDY_getByteOutput = m$RDY_getByteOutput ;
  assign CAN_FIRE_getByteOutput = m$RDY_getByteOutput ;
  assign WILL_FIRE_getByteOutput = EN_getByteOutput ;

  // action method doInit
  assign RDY_doInit = 1'd1 ;
  assign CAN_FIRE_doInit = 1'd1 ;
  assign WILL_FIRE_doInit = EN_doInit ;

  // actionvalue method ddr3client_request_get
  assign ddr3client_request_get = m$ddr3client_request_get ;
  assign RDY_ddr3client_request_get = m$RDY_ddr3client_request_get ;
  assign CAN_FIRE_ddr3client_request_get = m$RDY_ddr3client_request_get ;
  assign WILL_FIRE_ddr3client_request_get = EN_ddr3client_request_get ;

  // action method ddr3client_response_put
  assign RDY_ddr3client_response_put = m$RDY_ddr3client_response_put ;
  assign CAN_FIRE_ddr3client_response_put = m$RDY_ddr3client_response_put ;
  assign WILL_FIRE_ddr3client_response_put = EN_ddr3client_response_put ;

  // action method setmode_put
  assign RDY_setmode_put = 1'd1 ;
  assign CAN_FIRE_setmode_put = 1'd1 ;
  assign WILL_FIRE_setmode_put = EN_setmode_put ;

  // submodule m
  mkCommPipeline m(.CLK(CLK),
		   .RST_N(RST_N),
		   .ddr3client_response_put(m$ddr3client_response_put),
		   .doInit_x(m$doInit_x),
		   .putByteInput_in(m$putByteInput_in),
		   .setmode_put(m$setmode_put),
		   .EN_putByteInput(m$EN_putByteInput),
		   .EN_getByteOutput(m$EN_getByteOutput),
		   .EN_doInit(m$EN_doInit),
		   .EN_ddr3client_request_get(m$EN_ddr3client_request_get),
		   .EN_ddr3client_response_put(m$EN_ddr3client_response_put),
		   .EN_setmode_put(m$EN_setmode_put),
		   .RDY_putByteInput(m$RDY_putByteInput),
		   .getByteOutput(m$getByteOutput),
		   .RDY_getByteOutput(m$RDY_getByteOutput),
		   .RDY_doInit(),
		   .ddr3client_request_get(m$ddr3client_request_get),
		   .RDY_ddr3client_request_get(m$RDY_ddr3client_request_get),
		   .RDY_ddr3client_response_put(m$RDY_ddr3client_response_put),
		   .RDY_setmode_put());

  // submodule m
  assign m$ddr3client_response_put = ddr3client_response_put ;
  assign m$doInit_x = doInit_x ;
  assign m$putByteInput_in = putByteInput_in ;
  assign m$setmode_put = setmode_put ;
  assign m$EN_putByteInput = EN_putByteInput ;
  assign m$EN_getByteOutput = EN_getByteOutput ;
  assign m$EN_doInit = EN_doInit ;
  assign m$EN_ddr3client_request_get = EN_ddr3client_request_get ;
  assign m$EN_ddr3client_response_put = EN_ddr3client_response_put ;
  assign m$EN_setmode_put = EN_setmode_put ;
endmodule  // mkDutWrapper

