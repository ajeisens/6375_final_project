//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Mon Apr 18 18:32:55 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1
// response_get                   O   512
// RDY_response_get               O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I    24
// EN_request_put                 I     1
// EN_response_get                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSerializerPTW(CLK,
		       RST_N,

		       request_put,
		       EN_request_put,
		       RDY_request_put,

		       EN_response_get,
		       response_get,
		       RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [23 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [511 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  reg [511 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // inlined wires
  wire [512 : 0] outputFIFO_enqReq_wires_0$wget;
  wire [24 : 0] inputFIFO_enqReq_wires_0$wget;
  wire inputFIFO_deqReq_wires_0$whas,
       outputFIFO_deqReq_ignored_wires_2$wget,
       outputFIFO_enqReq_wires_0$whas;

  // register addr
  reg [23 : 0] addr;
  wire [23 : 0] addr$D_IN;
  wire addr$EN;

  // register inputFIFO_clearReq_ehrReg
  reg inputFIFO_clearReq_ehrReg;
  wire inputFIFO_clearReq_ehrReg$D_IN, inputFIFO_clearReq_ehrReg$EN;

  // register inputFIFO_data_0
  reg [23 : 0] inputFIFO_data_0;
  wire [23 : 0] inputFIFO_data_0$D_IN;
  wire inputFIFO_data_0$EN;

  // register inputFIFO_data_1
  reg [23 : 0] inputFIFO_data_1;
  wire [23 : 0] inputFIFO_data_1$D_IN;
  wire inputFIFO_data_1$EN;

  // register inputFIFO_deqP
  reg inputFIFO_deqP;
  wire inputFIFO_deqP$D_IN, inputFIFO_deqP$EN;

  // register inputFIFO_deqReq_ehrReg
  reg inputFIFO_deqReq_ehrReg;
  wire inputFIFO_deqReq_ehrReg$D_IN, inputFIFO_deqReq_ehrReg$EN;

  // register inputFIFO_empty
  reg inputFIFO_empty;
  wire inputFIFO_empty$D_IN, inputFIFO_empty$EN;

  // register inputFIFO_enqP
  reg inputFIFO_enqP;
  wire inputFIFO_enqP$D_IN, inputFIFO_enqP$EN;

  // register inputFIFO_enqReq_ehrReg
  reg [24 : 0] inputFIFO_enqReq_ehrReg;
  wire [24 : 0] inputFIFO_enqReq_ehrReg$D_IN;
  wire inputFIFO_enqReq_ehrReg$EN;

  // register inputFIFO_full
  reg inputFIFO_full;
  wire inputFIFO_full$D_IN, inputFIFO_full$EN;

  // register outputFIFO_clearReq_ehrReg
  reg outputFIFO_clearReq_ehrReg;
  wire outputFIFO_clearReq_ehrReg$D_IN, outputFIFO_clearReq_ehrReg$EN;

  // register outputFIFO_data_0
  reg [511 : 0] outputFIFO_data_0;
  wire [511 : 0] outputFIFO_data_0$D_IN;
  wire outputFIFO_data_0$EN;

  // register outputFIFO_data_1
  reg [511 : 0] outputFIFO_data_1;
  wire [511 : 0] outputFIFO_data_1$D_IN;
  wire outputFIFO_data_1$EN;

  // register outputFIFO_deqP
  reg outputFIFO_deqP;
  wire outputFIFO_deqP$D_IN, outputFIFO_deqP$EN;

  // register outputFIFO_deqReq_ehrReg
  reg outputFIFO_deqReq_ehrReg;
  wire outputFIFO_deqReq_ehrReg$D_IN, outputFIFO_deqReq_ehrReg$EN;

  // register outputFIFO_empty
  reg outputFIFO_empty;
  wire outputFIFO_empty$D_IN, outputFIFO_empty$EN;

  // register outputFIFO_enqP
  reg outputFIFO_enqP;
  wire outputFIFO_enqP$D_IN, outputFIFO_enqP$EN;

  // register outputFIFO_enqReq_ehrReg
  reg [512 : 0] outputFIFO_enqReq_ehrReg;
  wire [512 : 0] outputFIFO_enqReq_ehrReg$D_IN;
  wire outputFIFO_enqReq_ehrReg$EN;

  // register outputFIFO_full
  reg outputFIFO_full;
  wire outputFIFO_full$D_IN, outputFIFO_full$EN;

  // register pixel_count
  reg [3 : 0] pixel_count;
  wire [3 : 0] pixel_count$D_IN;
  wire pixel_count$EN;

  // register tempWord_0
  reg [23 : 0] tempWord_0;
  wire [23 : 0] tempWord_0$D_IN;
  wire tempWord_0$EN;

  // register tempWord_1
  reg [23 : 0] tempWord_1;
  wire [23 : 0] tempWord_1$D_IN;
  wire tempWord_1$EN;

  // register tempWord_10
  reg [23 : 0] tempWord_10;
  wire [23 : 0] tempWord_10$D_IN;
  wire tempWord_10$EN;

  // register tempWord_11
  reg [23 : 0] tempWord_11;
  wire [23 : 0] tempWord_11$D_IN;
  wire tempWord_11$EN;

  // register tempWord_12
  reg [23 : 0] tempWord_12;
  wire [23 : 0] tempWord_12$D_IN;
  wire tempWord_12$EN;

  // register tempWord_13
  reg [23 : 0] tempWord_13;
  wire [23 : 0] tempWord_13$D_IN;
  wire tempWord_13$EN;

  // register tempWord_14
  reg [23 : 0] tempWord_14;
  wire [23 : 0] tempWord_14$D_IN;
  wire tempWord_14$EN;

  // register tempWord_15
  reg [23 : 0] tempWord_15;
  wire [23 : 0] tempWord_15$D_IN;
  wire tempWord_15$EN;

  // register tempWord_2
  reg [23 : 0] tempWord_2;
  wire [23 : 0] tempWord_2$D_IN;
  wire tempWord_2$EN;

  // register tempWord_3
  reg [23 : 0] tempWord_3;
  wire [23 : 0] tempWord_3$D_IN;
  wire tempWord_3$EN;

  // register tempWord_4
  reg [23 : 0] tempWord_4;
  wire [23 : 0] tempWord_4$D_IN;
  wire tempWord_4$EN;

  // register tempWord_5
  reg [23 : 0] tempWord_5;
  wire [23 : 0] tempWord_5$D_IN;
  wire tempWord_5$EN;

  // register tempWord_6
  reg [23 : 0] tempWord_6;
  wire [23 : 0] tempWord_6$D_IN;
  wire tempWord_6$EN;

  // register tempWord_7
  reg [23 : 0] tempWord_7;
  wire [23 : 0] tempWord_7$D_IN;
  wire tempWord_7$EN;

  // register tempWord_8
  reg [23 : 0] tempWord_8;
  wire [23 : 0] tempWord_8$D_IN;
  wire tempWord_8$EN;

  // register tempWord_9
  reg [23 : 0] tempWord_9;
  wire [23 : 0] tempWord_9$D_IN;
  wire tempWord_9$EN;

  // ports of submodule inputFIFO_clearReq_virtual_reg_0
  wire inputFIFO_clearReq_virtual_reg_0$D_IN,
       inputFIFO_clearReq_virtual_reg_0$EN;

  // ports of submodule inputFIFO_clearReq_virtual_reg_1
  wire inputFIFO_clearReq_virtual_reg_1$D_IN,
       inputFIFO_clearReq_virtual_reg_1$EN,
       inputFIFO_clearReq_virtual_reg_1$Q_OUT;

  // ports of submodule inputFIFO_deqReq_virtual_reg_0
  wire inputFIFO_deqReq_virtual_reg_0$D_IN, inputFIFO_deqReq_virtual_reg_0$EN;

  // ports of submodule inputFIFO_deqReq_virtual_reg_1
  wire inputFIFO_deqReq_virtual_reg_1$D_IN, inputFIFO_deqReq_virtual_reg_1$EN;

  // ports of submodule inputFIFO_deqReq_virtual_reg_2
  wire inputFIFO_deqReq_virtual_reg_2$D_IN,
       inputFIFO_deqReq_virtual_reg_2$EN,
       inputFIFO_deqReq_virtual_reg_2$Q_OUT;

  // ports of submodule inputFIFO_enqReq_virtual_reg_0
  wire inputFIFO_enqReq_virtual_reg_0$D_IN, inputFIFO_enqReq_virtual_reg_0$EN;

  // ports of submodule inputFIFO_enqReq_virtual_reg_1
  wire inputFIFO_enqReq_virtual_reg_1$D_IN, inputFIFO_enqReq_virtual_reg_1$EN;

  // ports of submodule inputFIFO_enqReq_virtual_reg_2
  wire inputFIFO_enqReq_virtual_reg_2$D_IN,
       inputFIFO_enqReq_virtual_reg_2$EN,
       inputFIFO_enqReq_virtual_reg_2$Q_OUT;

  // ports of submodule outputFIFO_clearReq_virtual_reg_0
  wire outputFIFO_clearReq_virtual_reg_0$D_IN,
       outputFIFO_clearReq_virtual_reg_0$EN;

  // ports of submodule outputFIFO_clearReq_virtual_reg_1
  wire outputFIFO_clearReq_virtual_reg_1$D_IN,
       outputFIFO_clearReq_virtual_reg_1$EN,
       outputFIFO_clearReq_virtual_reg_1$Q_OUT;

  // ports of submodule outputFIFO_deqReq_virtual_reg_0
  wire outputFIFO_deqReq_virtual_reg_0$D_IN,
       outputFIFO_deqReq_virtual_reg_0$EN;

  // ports of submodule outputFIFO_deqReq_virtual_reg_1
  wire outputFIFO_deqReq_virtual_reg_1$D_IN,
       outputFIFO_deqReq_virtual_reg_1$EN;

  // ports of submodule outputFIFO_deqReq_virtual_reg_2
  wire outputFIFO_deqReq_virtual_reg_2$D_IN,
       outputFIFO_deqReq_virtual_reg_2$EN,
       outputFIFO_deqReq_virtual_reg_2$Q_OUT;

  // ports of submodule outputFIFO_enqReq_virtual_reg_0
  wire outputFIFO_enqReq_virtual_reg_0$D_IN,
       outputFIFO_enqReq_virtual_reg_0$EN;

  // ports of submodule outputFIFO_enqReq_virtual_reg_1
  wire outputFIFO_enqReq_virtual_reg_1$D_IN,
       outputFIFO_enqReq_virtual_reg_1$EN;

  // ports of submodule outputFIFO_enqReq_virtual_reg_2
  wire outputFIFO_enqReq_virtual_reg_2$D_IN,
       outputFIFO_enqReq_virtual_reg_2$EN,
       outputFIFO_enqReq_virtual_reg_2$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_inputFIFO_canonicalize,
       CAN_FIRE_RL_inputFIFO_clearReq_canonicalize,
       CAN_FIRE_RL_inputFIFO_deqReq_canonicalize,
       CAN_FIRE_RL_inputFIFO_enqReq_canonicalize,
       CAN_FIRE_RL_outputFIFO_canonicalize,
       CAN_FIRE_RL_outputFIFO_clearReq_canonicalize,
       CAN_FIRE_RL_outputFIFO_deqReq_canonicalize,
       CAN_FIRE_RL_outputFIFO_enqReq_canonicalize,
       CAN_FIRE_RL_pixeltoword,
       CAN_FIRE_request_put,
       CAN_FIRE_response_get,
       WILL_FIRE_RL_inputFIFO_canonicalize,
       WILL_FIRE_RL_inputFIFO_clearReq_canonicalize,
       WILL_FIRE_RL_inputFIFO_deqReq_canonicalize,
       WILL_FIRE_RL_inputFIFO_enqReq_canonicalize,
       WILL_FIRE_RL_outputFIFO_canonicalize,
       WILL_FIRE_RL_outputFIFO_clearReq_canonicalize,
       WILL_FIRE_RL_outputFIFO_deqReq_canonicalize,
       WILL_FIRE_RL_outputFIFO_enqReq_canonicalize,
       WILL_FIRE_RL_pixeltoword,
       WILL_FIRE_request_put,
       WILL_FIRE_response_get;

  // remaining internal signals
  reg [3 : 0] SEL_ARR_inputFIFO_data_0_26_BITS_11_TO_8_41_in_ETC___d244,
	      SEL_ARR_inputFIFO_data_0_26_BITS_15_TO_12_37_i_ETC___d240,
	      SEL_ARR_inputFIFO_data_0_26_BITS_19_TO_16_32_i_ETC___d235,
	      SEL_ARR_inputFIFO_data_0_26_BITS_23_TO_20_27_i_ETC___d231,
	      SEL_ARR_inputFIFO_data_0_26_BITS_3_TO_0_50_inp_ETC___d253,
	      SEL_ARR_inputFIFO_data_0_26_BITS_7_TO_4_46_inp_ETC___d249;
  wire [511 : 0] IF_outputFIFO_enqReq_wires_1_whas__29_THEN_out_ETC___d152;
  wire [23 : 0] IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27;
  wire [3 : 0] x__h32474;
  wire IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__2__ETC___d71,
       IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__2__ETC___d74,
       IF_NOT_inputFIFO_enqReq_virtual_reg_2_read__3__ETC___d80,
       IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__8_ETC___d196,
       IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__8_ETC___d199,
       IF_NOT_outputFIFO_enqReq_virtual_reg_2_read__7_ETC___d205,
       IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39,
       IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13,
       IF_outputFIFO_enqReq_wires_1_whas__29_THEN_out_ETC___d138,
       _theResult_____2__h10332,
       _theResult_____2__h18361,
       inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d52,
       next_deqP___1__h10737,
       next_deqP___1__h18766,
       outputFIFO_clearReq_virtual_reg_1_read__73_OR__ETC___d177,
       v__h17766,
       v__h18125,
       v__h6199,
       v__h6558;

  // action method request_put
  assign RDY_request_put = !inputFIFO_full ;
  assign CAN_FIRE_request_put = !inputFIFO_full ;
  assign WILL_FIRE_request_put = EN_request_put ;

  // actionvalue method response_get
  always@(outputFIFO_deqP or outputFIFO_data_0 or outputFIFO_data_1)
  begin
    case (outputFIFO_deqP)
      1'd0: response_get = outputFIFO_data_0;
      1'd1: response_get = outputFIFO_data_1;
    endcase
  end
  assign RDY_response_get = !outputFIFO_empty ;
  assign CAN_FIRE_response_get = !outputFIFO_empty ;
  assign WILL_FIRE_response_get = EN_response_get ;

  // submodule inputFIFO_clearReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_clearReq_virtual_reg_0(.CLK(CLK),
							    .D_IN(inputFIFO_clearReq_virtual_reg_0$D_IN),
							    .EN(inputFIFO_clearReq_virtual_reg_0$EN),
							    .Q_OUT());

  // submodule inputFIFO_clearReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_clearReq_virtual_reg_1(.CLK(CLK),
							    .D_IN(inputFIFO_clearReq_virtual_reg_1$D_IN),
							    .EN(inputFIFO_clearReq_virtual_reg_1$EN),
							    .Q_OUT(inputFIFO_clearReq_virtual_reg_1$Q_OUT));

  // submodule inputFIFO_deqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_deqReq_virtual_reg_0(.CLK(CLK),
							  .D_IN(inputFIFO_deqReq_virtual_reg_0$D_IN),
							  .EN(inputFIFO_deqReq_virtual_reg_0$EN),
							  .Q_OUT());

  // submodule inputFIFO_deqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_deqReq_virtual_reg_1(.CLK(CLK),
							  .D_IN(inputFIFO_deqReq_virtual_reg_1$D_IN),
							  .EN(inputFIFO_deqReq_virtual_reg_1$EN),
							  .Q_OUT());

  // submodule inputFIFO_deqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_deqReq_virtual_reg_2(.CLK(CLK),
							  .D_IN(inputFIFO_deqReq_virtual_reg_2$D_IN),
							  .EN(inputFIFO_deqReq_virtual_reg_2$EN),
							  .Q_OUT(inputFIFO_deqReq_virtual_reg_2$Q_OUT));

  // submodule inputFIFO_enqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_enqReq_virtual_reg_0(.CLK(CLK),
							  .D_IN(inputFIFO_enqReq_virtual_reg_0$D_IN),
							  .EN(inputFIFO_enqReq_virtual_reg_0$EN),
							  .Q_OUT());

  // submodule inputFIFO_enqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_enqReq_virtual_reg_1(.CLK(CLK),
							  .D_IN(inputFIFO_enqReq_virtual_reg_1$D_IN),
							  .EN(inputFIFO_enqReq_virtual_reg_1$EN),
							  .Q_OUT());

  // submodule inputFIFO_enqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_enqReq_virtual_reg_2(.CLK(CLK),
							  .D_IN(inputFIFO_enqReq_virtual_reg_2$D_IN),
							  .EN(inputFIFO_enqReq_virtual_reg_2$EN),
							  .Q_OUT(inputFIFO_enqReq_virtual_reg_2$Q_OUT));

  // submodule outputFIFO_clearReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_clearReq_virtual_reg_0(.CLK(CLK),
							     .D_IN(outputFIFO_clearReq_virtual_reg_0$D_IN),
							     .EN(outputFIFO_clearReq_virtual_reg_0$EN),
							     .Q_OUT());

  // submodule outputFIFO_clearReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_clearReq_virtual_reg_1(.CLK(CLK),
							     .D_IN(outputFIFO_clearReq_virtual_reg_1$D_IN),
							     .EN(outputFIFO_clearReq_virtual_reg_1$EN),
							     .Q_OUT(outputFIFO_clearReq_virtual_reg_1$Q_OUT));

  // submodule outputFIFO_deqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_deqReq_virtual_reg_0(.CLK(CLK),
							   .D_IN(outputFIFO_deqReq_virtual_reg_0$D_IN),
							   .EN(outputFIFO_deqReq_virtual_reg_0$EN),
							   .Q_OUT());

  // submodule outputFIFO_deqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_deqReq_virtual_reg_1(.CLK(CLK),
							   .D_IN(outputFIFO_deqReq_virtual_reg_1$D_IN),
							   .EN(outputFIFO_deqReq_virtual_reg_1$EN),
							   .Q_OUT());

  // submodule outputFIFO_deqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_deqReq_virtual_reg_2(.CLK(CLK),
							   .D_IN(outputFIFO_deqReq_virtual_reg_2$D_IN),
							   .EN(outputFIFO_deqReq_virtual_reg_2$EN),
							   .Q_OUT(outputFIFO_deqReq_virtual_reg_2$Q_OUT));

  // submodule outputFIFO_enqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_enqReq_virtual_reg_0(.CLK(CLK),
							   .D_IN(outputFIFO_enqReq_virtual_reg_0$D_IN),
							   .EN(outputFIFO_enqReq_virtual_reg_0$EN),
							   .Q_OUT());

  // submodule outputFIFO_enqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_enqReq_virtual_reg_1(.CLK(CLK),
							   .D_IN(outputFIFO_enqReq_virtual_reg_1$D_IN),
							   .EN(outputFIFO_enqReq_virtual_reg_1$EN),
							   .Q_OUT());

  // submodule outputFIFO_enqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_enqReq_virtual_reg_2(.CLK(CLK),
							   .D_IN(outputFIFO_enqReq_virtual_reg_2$D_IN),
							   .EN(outputFIFO_enqReq_virtual_reg_2$EN),
							   .Q_OUT(outputFIFO_enqReq_virtual_reg_2$Q_OUT));

  // rule RL_pixeltoword
  assign CAN_FIRE_RL_pixeltoword = inputFIFO_deqReq_wires_0$whas ;
  assign WILL_FIRE_RL_pixeltoword = inputFIFO_deqReq_wires_0$whas ;

  // rule RL_inputFIFO_canonicalize
  assign CAN_FIRE_RL_inputFIFO_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_canonicalize = 1'd1 ;

  // rule RL_inputFIFO_enqReq_canonicalize
  assign CAN_FIRE_RL_inputFIFO_enqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_enqReq_canonicalize = 1'd1 ;

  // rule RL_inputFIFO_deqReq_canonicalize
  assign CAN_FIRE_RL_inputFIFO_deqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_deqReq_canonicalize = 1'd1 ;

  // rule RL_inputFIFO_clearReq_canonicalize
  assign CAN_FIRE_RL_inputFIFO_clearReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_clearReq_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_canonicalize
  assign CAN_FIRE_RL_outputFIFO_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_enqReq_canonicalize
  assign CAN_FIRE_RL_outputFIFO_enqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_enqReq_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_deqReq_canonicalize
  assign CAN_FIRE_RL_outputFIFO_deqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_deqReq_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_clearReq_canonicalize
  assign CAN_FIRE_RL_outputFIFO_clearReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_clearReq_canonicalize = 1'd1 ;

  // inlined wires
  assign inputFIFO_enqReq_wires_0$wget = { 1'd1, request_put } ;
  assign inputFIFO_deqReq_wires_0$whas =
	     !inputFIFO_empty && (pixel_count != 4'd15 || !outputFIFO_full) ;
  assign outputFIFO_enqReq_wires_0$wget =
	     { 129'h100000000000000000000000000000000,
	       SEL_ARR_inputFIFO_data_0_26_BITS_23_TO_20_27_i_ETC___d231,
	       SEL_ARR_inputFIFO_data_0_26_BITS_19_TO_16_32_i_ETC___d235,
	       SEL_ARR_inputFIFO_data_0_26_BITS_15_TO_12_37_i_ETC___d240,
	       SEL_ARR_inputFIFO_data_0_26_BITS_11_TO_8_41_in_ETC___d244,
	       SEL_ARR_inputFIFO_data_0_26_BITS_7_TO_4_46_inp_ETC___d249,
	       SEL_ARR_inputFIFO_data_0_26_BITS_3_TO_0_50_inp_ETC___d253,
	       tempWord_14,
	       tempWord_13,
	       tempWord_12,
	       tempWord_11,
	       tempWord_10,
	       tempWord_9,
	       tempWord_8,
	       tempWord_7,
	       tempWord_6,
	       tempWord_5,
	       tempWord_4,
	       tempWord_3,
	       tempWord_2,
	       tempWord_1,
	       tempWord_0 } ;
  assign outputFIFO_enqReq_wires_0$whas =
	     WILL_FIRE_RL_pixeltoword && pixel_count == 4'd15 ;
  assign outputFIFO_deqReq_ignored_wires_2$wget =
	     EN_response_get || outputFIFO_deqReq_ehrReg ;

  // register addr
  assign addr$D_IN = 24'h0 ;
  assign addr$EN = 1'b0 ;

  // register inputFIFO_clearReq_ehrReg
  assign inputFIFO_clearReq_ehrReg$D_IN = 1'd0 ;
  assign inputFIFO_clearReq_ehrReg$EN = 1'd1 ;

  // register inputFIFO_data_0
  assign inputFIFO_data_0$D_IN =
	     (inputFIFO_enqReq_virtual_reg_2$Q_OUT ||
	      (EN_request_put ?
		 !inputFIFO_enqReq_wires_0$wget[24] :
		 !inputFIFO_enqReq_ehrReg[24])) ?
	       { EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[23:20] :
		   inputFIFO_enqReq_ehrReg[23:20],
		 EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[19:16] :
		   inputFIFO_enqReq_ehrReg[19:16],
		 EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[15:12] :
		   inputFIFO_enqReq_ehrReg[15:12],
		 EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[11:8] :
		   inputFIFO_enqReq_ehrReg[11:8],
		 EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[7:4] :
		   inputFIFO_enqReq_ehrReg[7:4],
		 EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[3:0] :
		   inputFIFO_enqReq_ehrReg[3:0] } :
	       IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_0$EN =
	     inputFIFO_enqP == 1'd0 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d52 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_1
  assign inputFIFO_data_1$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_1$EN =
	     inputFIFO_enqP == 1'd1 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d52 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_deqP
  assign inputFIFO_deqP$D_IN =
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d52 &&
	     _theResult_____2__h10332 ;
  assign inputFIFO_deqP$EN = 1'd1 ;

  // register inputFIFO_deqReq_ehrReg
  assign inputFIFO_deqReq_ehrReg$D_IN = 1'd0 ;
  assign inputFIFO_deqReq_ehrReg$EN = 1'd1 ;

  // register inputFIFO_empty
  assign inputFIFO_empty$D_IN =
	     !inputFIFO_clearReq_virtual_reg_1$Q_OUT &&
	     inputFIFO_clearReq_ehrReg ||
	     IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__2__ETC___d71 &&
	     IF_NOT_inputFIFO_enqReq_virtual_reg_2_read__3__ETC___d80 ;
  assign inputFIFO_empty$EN = 1'd1 ;

  // register inputFIFO_enqP
  assign inputFIFO_enqP$D_IN =
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d52 &&
	     v__h6199 ;
  assign inputFIFO_enqP$EN = 1'd1 ;

  // register inputFIFO_enqReq_ehrReg
  assign inputFIFO_enqReq_ehrReg$D_IN = 25'b0101010101010101010101010 ;
  assign inputFIFO_enqReq_ehrReg$EN = 1'd1 ;

  // register inputFIFO_full
  assign inputFIFO_full$D_IN =
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d52 &&
	     IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__2__ETC___d74 ;
  assign inputFIFO_full$EN = 1'd1 ;

  // register outputFIFO_clearReq_ehrReg
  assign outputFIFO_clearReq_ehrReg$D_IN = 1'd0 ;
  assign outputFIFO_clearReq_ehrReg$EN = 1'd1 ;

  // register outputFIFO_data_0
  assign outputFIFO_data_0$D_IN =
	     IF_outputFIFO_enqReq_wires_1_whas__29_THEN_out_ETC___d152 ;
  assign outputFIFO_data_0$EN =
	     outputFIFO_enqP == 1'd0 &&
	     outputFIFO_clearReq_virtual_reg_1_read__73_OR__ETC___d177 &&
	     !outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_outputFIFO_enqReq_wires_1_whas__29_THEN_out_ETC___d138 ;

  // register outputFIFO_data_1
  assign outputFIFO_data_1$D_IN =
	     IF_outputFIFO_enqReq_wires_1_whas__29_THEN_out_ETC___d152 ;
  assign outputFIFO_data_1$EN =
	     outputFIFO_enqP == 1'd1 &&
	     outputFIFO_clearReq_virtual_reg_1_read__73_OR__ETC___d177 &&
	     !outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_outputFIFO_enqReq_wires_1_whas__29_THEN_out_ETC___d138 ;

  // register outputFIFO_deqP
  assign outputFIFO_deqP$D_IN =
	     outputFIFO_clearReq_virtual_reg_1_read__73_OR__ETC___d177 &&
	     _theResult_____2__h18361 ;
  assign outputFIFO_deqP$EN = 1'd1 ;

  // register outputFIFO_deqReq_ehrReg
  assign outputFIFO_deqReq_ehrReg$D_IN = 1'd0 ;
  assign outputFIFO_deqReq_ehrReg$EN = 1'd1 ;

  // register outputFIFO_empty
  assign outputFIFO_empty$D_IN =
	     !outputFIFO_clearReq_virtual_reg_1$Q_OUT &&
	     outputFIFO_clearReq_ehrReg ||
	     IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__8_ETC___d196 &&
	     IF_NOT_outputFIFO_enqReq_virtual_reg_2_read__7_ETC___d205 ;
  assign outputFIFO_empty$EN = 1'd1 ;

  // register outputFIFO_enqP
  assign outputFIFO_enqP$D_IN =
	     outputFIFO_clearReq_virtual_reg_1_read__73_OR__ETC___d177 &&
	     v__h17766 ;
  assign outputFIFO_enqP$EN = 1'd1 ;

  // register outputFIFO_enqReq_ehrReg
  assign outputFIFO_enqReq_ehrReg$D_IN =
	     513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign outputFIFO_enqReq_ehrReg$EN = 1'd1 ;

  // register outputFIFO_full
  assign outputFIFO_full$D_IN =
	     outputFIFO_clearReq_virtual_reg_1_read__73_OR__ETC___d177 &&
	     IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__8_ETC___d199 ;
  assign outputFIFO_full$EN = 1'd1 ;

  // register pixel_count
  assign pixel_count$D_IN = (pixel_count == 4'd15) ? 4'd0 : x__h32474 ;
  assign pixel_count$EN = inputFIFO_deqReq_wires_0$whas ;

  // register tempWord_0
  assign tempWord_0$D_IN =
	     { SEL_ARR_inputFIFO_data_0_26_BITS_23_TO_20_27_i_ETC___d231,
	       SEL_ARR_inputFIFO_data_0_26_BITS_19_TO_16_32_i_ETC___d235,
	       SEL_ARR_inputFIFO_data_0_26_BITS_15_TO_12_37_i_ETC___d240,
	       SEL_ARR_inputFIFO_data_0_26_BITS_11_TO_8_41_in_ETC___d244,
	       SEL_ARR_inputFIFO_data_0_26_BITS_7_TO_4_46_inp_ETC___d249,
	       SEL_ARR_inputFIFO_data_0_26_BITS_3_TO_0_50_inp_ETC___d253 } ;
  assign tempWord_0$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd0 ;

  // register tempWord_1
  assign tempWord_1$D_IN = tempWord_0$D_IN ;
  assign tempWord_1$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd1 ;

  // register tempWord_10
  assign tempWord_10$D_IN = tempWord_0$D_IN ;
  assign tempWord_10$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd10 ;

  // register tempWord_11
  assign tempWord_11$D_IN = tempWord_0$D_IN ;
  assign tempWord_11$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd11 ;

  // register tempWord_12
  assign tempWord_12$D_IN = tempWord_0$D_IN ;
  assign tempWord_12$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd12 ;

  // register tempWord_13
  assign tempWord_13$D_IN = tempWord_0$D_IN ;
  assign tempWord_13$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd13 ;

  // register tempWord_14
  assign tempWord_14$D_IN = tempWord_0$D_IN ;
  assign tempWord_14$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd14 ;

  // register tempWord_15
  assign tempWord_15$D_IN = tempWord_0$D_IN ;
  assign tempWord_15$EN = outputFIFO_enqReq_wires_0$whas ;

  // register tempWord_2
  assign tempWord_2$D_IN = tempWord_0$D_IN ;
  assign tempWord_2$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd2 ;

  // register tempWord_3
  assign tempWord_3$D_IN = tempWord_0$D_IN ;
  assign tempWord_3$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd3 ;

  // register tempWord_4
  assign tempWord_4$D_IN = tempWord_0$D_IN ;
  assign tempWord_4$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd4 ;

  // register tempWord_5
  assign tempWord_5$D_IN = tempWord_0$D_IN ;
  assign tempWord_5$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd5 ;

  // register tempWord_6
  assign tempWord_6$D_IN = tempWord_0$D_IN ;
  assign tempWord_6$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd6 ;

  // register tempWord_7
  assign tempWord_7$D_IN = tempWord_0$D_IN ;
  assign tempWord_7$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd7 ;

  // register tempWord_8
  assign tempWord_8$D_IN = tempWord_0$D_IN ;
  assign tempWord_8$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd8 ;

  // register tempWord_9
  assign tempWord_9$D_IN = tempWord_0$D_IN ;
  assign tempWord_9$EN = WILL_FIRE_RL_pixeltoword && pixel_count == 4'd9 ;

  // submodule inputFIFO_clearReq_virtual_reg_0
  assign inputFIFO_clearReq_virtual_reg_0$D_IN = 1'b0 ;
  assign inputFIFO_clearReq_virtual_reg_0$EN = 1'b0 ;

  // submodule inputFIFO_clearReq_virtual_reg_1
  assign inputFIFO_clearReq_virtual_reg_1$D_IN = 1'd0 ;
  assign inputFIFO_clearReq_virtual_reg_1$EN = 1'd1 ;

  // submodule inputFIFO_deqReq_virtual_reg_0
  assign inputFIFO_deqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign inputFIFO_deqReq_virtual_reg_0$EN = inputFIFO_deqReq_wires_0$whas ;

  // submodule inputFIFO_deqReq_virtual_reg_1
  assign inputFIFO_deqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign inputFIFO_deqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule inputFIFO_deqReq_virtual_reg_2
  assign inputFIFO_deqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign inputFIFO_deqReq_virtual_reg_2$EN = 1'd1 ;

  // submodule inputFIFO_enqReq_virtual_reg_0
  assign inputFIFO_enqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign inputFIFO_enqReq_virtual_reg_0$EN = EN_request_put ;

  // submodule inputFIFO_enqReq_virtual_reg_1
  assign inputFIFO_enqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign inputFIFO_enqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule inputFIFO_enqReq_virtual_reg_2
  assign inputFIFO_enqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign inputFIFO_enqReq_virtual_reg_2$EN = 1'd1 ;

  // submodule outputFIFO_clearReq_virtual_reg_0
  assign outputFIFO_clearReq_virtual_reg_0$D_IN = 1'b0 ;
  assign outputFIFO_clearReq_virtual_reg_0$EN = 1'b0 ;

  // submodule outputFIFO_clearReq_virtual_reg_1
  assign outputFIFO_clearReq_virtual_reg_1$D_IN = 1'd0 ;
  assign outputFIFO_clearReq_virtual_reg_1$EN = 1'd1 ;

  // submodule outputFIFO_deqReq_virtual_reg_0
  assign outputFIFO_deqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign outputFIFO_deqReq_virtual_reg_0$EN = EN_response_get ;

  // submodule outputFIFO_deqReq_virtual_reg_1
  assign outputFIFO_deqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign outputFIFO_deqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule outputFIFO_deqReq_virtual_reg_2
  assign outputFIFO_deqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign outputFIFO_deqReq_virtual_reg_2$EN = 1'd1 ;

  // submodule outputFIFO_enqReq_virtual_reg_0
  assign outputFIFO_enqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign outputFIFO_enqReq_virtual_reg_0$EN = outputFIFO_enqReq_wires_0$whas ;

  // submodule outputFIFO_enqReq_virtual_reg_1
  assign outputFIFO_enqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign outputFIFO_enqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule outputFIFO_enqReq_virtual_reg_2
  assign outputFIFO_enqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign outputFIFO_enqReq_virtual_reg_2$EN = 1'd1 ;

  // remaining internal signals
  assign IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__2__ETC___d71 =
	     _theResult_____2__h10332 == v__h6199 ;
  assign IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__2__ETC___d74 =
	     IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__2__ETC___d71 &&
	     (!inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ||
	      inputFIFO_full) ;
  assign IF_NOT_inputFIFO_enqReq_virtual_reg_2_read__3__ETC___d80 =
	     (!inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13) ?
	       inputFIFO_empty :
	       !inputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	       IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39 ||
	       inputFIFO_empty ;
  assign IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__8_ETC___d196 =
	     _theResult_____2__h18361 == v__h17766 ;
  assign IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__8_ETC___d199 =
	     IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__8_ETC___d196 &&
	     (!outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_outputFIFO_enqReq_wires_1_whas__29_THEN_out_ETC___d138 ||
	      outputFIFO_full) ;
  assign IF_NOT_outputFIFO_enqReq_virtual_reg_2_read__7_ETC___d205 =
	     (!outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_outputFIFO_enqReq_wires_1_whas__29_THEN_out_ETC___d138) ?
	       outputFIFO_empty :
	       !outputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	       outputFIFO_deqReq_ignored_wires_2$wget ||
	       outputFIFO_empty ;
  assign IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39 =
	     inputFIFO_deqReq_wires_0$whas || inputFIFO_deqReq_ehrReg ;
  assign IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 =
	     EN_request_put ?
	       inputFIFO_enqReq_wires_0$wget[24] :
	       inputFIFO_enqReq_ehrReg[24] ;
  assign IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 =
	     EN_request_put ?
	       inputFIFO_enqReq_wires_0$wget[23:0] :
	       inputFIFO_enqReq_ehrReg[23:0] ;
  assign IF_outputFIFO_enqReq_wires_1_whas__29_THEN_out_ETC___d138 =
	     outputFIFO_enqReq_wires_0$whas ?
	       outputFIFO_enqReq_wires_0$wget[512] :
	       outputFIFO_enqReq_ehrReg[512] ;
  assign IF_outputFIFO_enqReq_wires_1_whas__29_THEN_out_ETC___d152 =
	     outputFIFO_enqReq_wires_0$whas ?
	       outputFIFO_enqReq_wires_0$wget[511:0] :
	       outputFIFO_enqReq_ehrReg[511:0] ;
  assign _theResult_____2__h10332 =
	     (!inputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39) ?
	       next_deqP___1__h10737 :
	       inputFIFO_deqP ;
  assign _theResult_____2__h18361 =
	     (!outputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	      outputFIFO_deqReq_ignored_wires_2$wget) ?
	       next_deqP___1__h18766 :
	       outputFIFO_deqP ;
  assign inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d52 =
	     inputFIFO_clearReq_virtual_reg_1$Q_OUT ||
	     !inputFIFO_clearReq_ehrReg ;
  assign next_deqP___1__h10737 = inputFIFO_deqP + 1'd1 ;
  assign next_deqP___1__h18766 = outputFIFO_deqP + 1'd1 ;
  assign outputFIFO_clearReq_virtual_reg_1_read__73_OR__ETC___d177 =
	     outputFIFO_clearReq_virtual_reg_1$Q_OUT ||
	     !outputFIFO_clearReq_ehrReg ;
  assign v__h17766 =
	     (!outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_outputFIFO_enqReq_wires_1_whas__29_THEN_out_ETC___d138) ?
	       v__h18125 :
	       outputFIFO_enqP ;
  assign v__h18125 = outputFIFO_enqP + 1'd1 ;
  assign v__h6199 =
	     (!inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13) ?
	       v__h6558 :
	       inputFIFO_enqP ;
  assign v__h6558 = inputFIFO_enqP + 1'd1 ;
  assign x__h32474 = pixel_count + 4'd1 ;
  always@(inputFIFO_deqP or inputFIFO_data_0 or inputFIFO_data_1)
  begin
    case (inputFIFO_deqP)
      1'd0:
	  SEL_ARR_inputFIFO_data_0_26_BITS_23_TO_20_27_i_ETC___d231 =
	      inputFIFO_data_0[23:20];
      1'd1:
	  SEL_ARR_inputFIFO_data_0_26_BITS_23_TO_20_27_i_ETC___d231 =
	      inputFIFO_data_1[23:20];
    endcase
  end
  always@(inputFIFO_deqP or inputFIFO_data_0 or inputFIFO_data_1)
  begin
    case (inputFIFO_deqP)
      1'd0:
	  SEL_ARR_inputFIFO_data_0_26_BITS_19_TO_16_32_i_ETC___d235 =
	      inputFIFO_data_0[19:16];
      1'd1:
	  SEL_ARR_inputFIFO_data_0_26_BITS_19_TO_16_32_i_ETC___d235 =
	      inputFIFO_data_1[19:16];
    endcase
  end
  always@(inputFIFO_deqP or inputFIFO_data_0 or inputFIFO_data_1)
  begin
    case (inputFIFO_deqP)
      1'd0:
	  SEL_ARR_inputFIFO_data_0_26_BITS_15_TO_12_37_i_ETC___d240 =
	      inputFIFO_data_0[15:12];
      1'd1:
	  SEL_ARR_inputFIFO_data_0_26_BITS_15_TO_12_37_i_ETC___d240 =
	      inputFIFO_data_1[15:12];
    endcase
  end
  always@(inputFIFO_deqP or inputFIFO_data_0 or inputFIFO_data_1)
  begin
    case (inputFIFO_deqP)
      1'd0:
	  SEL_ARR_inputFIFO_data_0_26_BITS_11_TO_8_41_in_ETC___d244 =
	      inputFIFO_data_0[11:8];
      1'd1:
	  SEL_ARR_inputFIFO_data_0_26_BITS_11_TO_8_41_in_ETC___d244 =
	      inputFIFO_data_1[11:8];
    endcase
  end
  always@(inputFIFO_deqP or inputFIFO_data_0 or inputFIFO_data_1)
  begin
    case (inputFIFO_deqP)
      1'd0:
	  SEL_ARR_inputFIFO_data_0_26_BITS_7_TO_4_46_inp_ETC___d249 =
	      inputFIFO_data_0[7:4];
      1'd1:
	  SEL_ARR_inputFIFO_data_0_26_BITS_7_TO_4_46_inp_ETC___d249 =
	      inputFIFO_data_1[7:4];
    endcase
  end
  always@(inputFIFO_deqP or inputFIFO_data_0 or inputFIFO_data_1)
  begin
    case (inputFIFO_deqP)
      1'd0:
	  SEL_ARR_inputFIFO_data_0_26_BITS_3_TO_0_50_inp_ETC___d253 =
	      inputFIFO_data_0[3:0];
      1'd1:
	  SEL_ARR_inputFIFO_data_0_26_BITS_3_TO_0_50_inp_ETC___d253 =
	      inputFIFO_data_1[3:0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        addr <= `BSV_ASSIGNMENT_DELAY 24'd0;
	inputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inputFIFO_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	inputFIFO_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	outputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	    513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	outputFIFO_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pixel_count <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (addr$EN) addr <= `BSV_ASSIGNMENT_DELAY addr$D_IN;
	if (inputFIFO_clearReq_ehrReg$EN)
	  inputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      inputFIFO_clearReq_ehrReg$D_IN;
	if (inputFIFO_deqP$EN)
	  inputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY inputFIFO_deqP$D_IN;
	if (inputFIFO_deqReq_ehrReg$EN)
	  inputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      inputFIFO_deqReq_ehrReg$D_IN;
	if (inputFIFO_empty$EN)
	  inputFIFO_empty <= `BSV_ASSIGNMENT_DELAY inputFIFO_empty$D_IN;
	if (inputFIFO_enqP$EN)
	  inputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY inputFIFO_enqP$D_IN;
	if (inputFIFO_enqReq_ehrReg$EN)
	  inputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      inputFIFO_enqReq_ehrReg$D_IN;
	if (inputFIFO_full$EN)
	  inputFIFO_full <= `BSV_ASSIGNMENT_DELAY inputFIFO_full$D_IN;
	if (outputFIFO_clearReq_ehrReg$EN)
	  outputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      outputFIFO_clearReq_ehrReg$D_IN;
	if (outputFIFO_deqP$EN)
	  outputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY outputFIFO_deqP$D_IN;
	if (outputFIFO_deqReq_ehrReg$EN)
	  outputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      outputFIFO_deqReq_ehrReg$D_IN;
	if (outputFIFO_empty$EN)
	  outputFIFO_empty <= `BSV_ASSIGNMENT_DELAY outputFIFO_empty$D_IN;
	if (outputFIFO_enqP$EN)
	  outputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY outputFIFO_enqP$D_IN;
	if (outputFIFO_enqReq_ehrReg$EN)
	  outputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      outputFIFO_enqReq_ehrReg$D_IN;
	if (outputFIFO_full$EN)
	  outputFIFO_full <= `BSV_ASSIGNMENT_DELAY outputFIFO_full$D_IN;
	if (pixel_count$EN)
	  pixel_count <= `BSV_ASSIGNMENT_DELAY pixel_count$D_IN;
      end
    if (inputFIFO_data_0$EN)
      inputFIFO_data_0 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_0$D_IN;
    if (inputFIFO_data_1$EN)
      inputFIFO_data_1 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_1$D_IN;
    if (outputFIFO_data_0$EN)
      outputFIFO_data_0 <= `BSV_ASSIGNMENT_DELAY outputFIFO_data_0$D_IN;
    if (outputFIFO_data_1$EN)
      outputFIFO_data_1 <= `BSV_ASSIGNMENT_DELAY outputFIFO_data_1$D_IN;
    if (tempWord_0$EN) tempWord_0 <= `BSV_ASSIGNMENT_DELAY tempWord_0$D_IN;
    if (tempWord_1$EN) tempWord_1 <= `BSV_ASSIGNMENT_DELAY tempWord_1$D_IN;
    if (tempWord_10$EN) tempWord_10 <= `BSV_ASSIGNMENT_DELAY tempWord_10$D_IN;
    if (tempWord_11$EN) tempWord_11 <= `BSV_ASSIGNMENT_DELAY tempWord_11$D_IN;
    if (tempWord_12$EN) tempWord_12 <= `BSV_ASSIGNMENT_DELAY tempWord_12$D_IN;
    if (tempWord_13$EN) tempWord_13 <= `BSV_ASSIGNMENT_DELAY tempWord_13$D_IN;
    if (tempWord_14$EN) tempWord_14 <= `BSV_ASSIGNMENT_DELAY tempWord_14$D_IN;
    if (tempWord_15$EN) tempWord_15 <= `BSV_ASSIGNMENT_DELAY tempWord_15$D_IN;
    if (tempWord_2$EN) tempWord_2 <= `BSV_ASSIGNMENT_DELAY tempWord_2$D_IN;
    if (tempWord_3$EN) tempWord_3 <= `BSV_ASSIGNMENT_DELAY tempWord_3$D_IN;
    if (tempWord_4$EN) tempWord_4 <= `BSV_ASSIGNMENT_DELAY tempWord_4$D_IN;
    if (tempWord_5$EN) tempWord_5 <= `BSV_ASSIGNMENT_DELAY tempWord_5$D_IN;
    if (tempWord_6$EN) tempWord_6 <= `BSV_ASSIGNMENT_DELAY tempWord_6$D_IN;
    if (tempWord_7$EN) tempWord_7 <= `BSV_ASSIGNMENT_DELAY tempWord_7$D_IN;
    if (tempWord_8$EN) tempWord_8 <= `BSV_ASSIGNMENT_DELAY tempWord_8$D_IN;
    if (tempWord_9$EN) tempWord_9 <= `BSV_ASSIGNMENT_DELAY tempWord_9$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    addr = 24'hAAAAAA;
    inputFIFO_clearReq_ehrReg = 1'h0;
    inputFIFO_data_0 = 24'hAAAAAA;
    inputFIFO_data_1 = 24'hAAAAAA;
    inputFIFO_deqP = 1'h0;
    inputFIFO_deqReq_ehrReg = 1'h0;
    inputFIFO_empty = 1'h0;
    inputFIFO_enqP = 1'h0;
    inputFIFO_enqReq_ehrReg = 25'h0AAAAAA;
    inputFIFO_full = 1'h0;
    outputFIFO_clearReq_ehrReg = 1'h0;
    outputFIFO_data_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    outputFIFO_data_1 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    outputFIFO_deqP = 1'h0;
    outputFIFO_deqReq_ehrReg = 1'h0;
    outputFIFO_empty = 1'h0;
    outputFIFO_enqP = 1'h0;
    outputFIFO_enqReq_ehrReg =
	513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    outputFIFO_full = 1'h0;
    pixel_count = 4'hA;
    tempWord_0 = 24'hAAAAAA;
    tempWord_1 = 24'hAAAAAA;
    tempWord_10 = 24'hAAAAAA;
    tempWord_11 = 24'hAAAAAA;
    tempWord_12 = 24'hAAAAAA;
    tempWord_13 = 24'hAAAAAA;
    tempWord_14 = 24'hAAAAAA;
    tempWord_15 = 24'hAAAAAA;
    tempWord_2 = 24'hAAAAAA;
    tempWord_3 = 24'hAAAAAA;
    tempWord_4 = 24'hAAAAAA;
    tempWord_5 = 24'hAAAAAA;
    tempWord_6 = 24'hAAAAAA;
    tempWord_7 = 24'hAAAAAA;
    tempWord_8 = 24'hAAAAAA;
    tempWord_9 = 24'hAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSerializerPTW

