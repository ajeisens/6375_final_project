//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Mon Apr 18 18:33:01 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1
// response_get                   O     4
// RDY_response_get               O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I    24
// EN_request_put                 I     1
// EN_response_get                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDeserializerPTB(CLK,
			 RST_N,

			 request_put,
			 EN_request_put,
			 RDY_request_put,

			 EN_response_get,
			 response_get,
			 RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [23 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [3 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  reg [3 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // inlined wires
  wire [24 : 0] inputFIFO_enqReq_wires_0$wget;
  wire [4 : 0] outputFIFO_enqReq_wires_0$wget;
  wire inputFIFO_deqReq_wires_0$whas,
       outputFIFO_deqReq_ignored_wires_2$wget,
       outputFIFO_enqReq_wires_0$whas;

  // register byte_count
  reg [2 : 0] byte_count;
  wire [2 : 0] byte_count$D_IN;
  wire byte_count$EN;

  // register inputFIFO_clearReq_ehrReg
  reg inputFIFO_clearReq_ehrReg;
  wire inputFIFO_clearReq_ehrReg$D_IN, inputFIFO_clearReq_ehrReg$EN;

  // register inputFIFO_data_0
  reg [23 : 0] inputFIFO_data_0;
  wire [23 : 0] inputFIFO_data_0$D_IN;
  wire inputFIFO_data_0$EN;

  // register inputFIFO_data_1
  reg [23 : 0] inputFIFO_data_1;
  wire [23 : 0] inputFIFO_data_1$D_IN;
  wire inputFIFO_data_1$EN;

  // register inputFIFO_data_10
  reg [23 : 0] inputFIFO_data_10;
  wire [23 : 0] inputFIFO_data_10$D_IN;
  wire inputFIFO_data_10$EN;

  // register inputFIFO_data_11
  reg [23 : 0] inputFIFO_data_11;
  wire [23 : 0] inputFIFO_data_11$D_IN;
  wire inputFIFO_data_11$EN;

  // register inputFIFO_data_2
  reg [23 : 0] inputFIFO_data_2;
  wire [23 : 0] inputFIFO_data_2$D_IN;
  wire inputFIFO_data_2$EN;

  // register inputFIFO_data_3
  reg [23 : 0] inputFIFO_data_3;
  wire [23 : 0] inputFIFO_data_3$D_IN;
  wire inputFIFO_data_3$EN;

  // register inputFIFO_data_4
  reg [23 : 0] inputFIFO_data_4;
  wire [23 : 0] inputFIFO_data_4$D_IN;
  wire inputFIFO_data_4$EN;

  // register inputFIFO_data_5
  reg [23 : 0] inputFIFO_data_5;
  wire [23 : 0] inputFIFO_data_5$D_IN;
  wire inputFIFO_data_5$EN;

  // register inputFIFO_data_6
  reg [23 : 0] inputFIFO_data_6;
  wire [23 : 0] inputFIFO_data_6$D_IN;
  wire inputFIFO_data_6$EN;

  // register inputFIFO_data_7
  reg [23 : 0] inputFIFO_data_7;
  wire [23 : 0] inputFIFO_data_7$D_IN;
  wire inputFIFO_data_7$EN;

  // register inputFIFO_data_8
  reg [23 : 0] inputFIFO_data_8;
  wire [23 : 0] inputFIFO_data_8$D_IN;
  wire inputFIFO_data_8$EN;

  // register inputFIFO_data_9
  reg [23 : 0] inputFIFO_data_9;
  wire [23 : 0] inputFIFO_data_9$D_IN;
  wire inputFIFO_data_9$EN;

  // register inputFIFO_deqP
  reg [3 : 0] inputFIFO_deqP;
  wire [3 : 0] inputFIFO_deqP$D_IN;
  wire inputFIFO_deqP$EN;

  // register inputFIFO_deqReq_ehrReg
  reg inputFIFO_deqReq_ehrReg;
  wire inputFIFO_deqReq_ehrReg$D_IN, inputFIFO_deqReq_ehrReg$EN;

  // register inputFIFO_empty
  reg inputFIFO_empty;
  wire inputFIFO_empty$D_IN, inputFIFO_empty$EN;

  // register inputFIFO_enqP
  reg [3 : 0] inputFIFO_enqP;
  wire [3 : 0] inputFIFO_enqP$D_IN;
  wire inputFIFO_enqP$EN;

  // register inputFIFO_enqReq_ehrReg
  reg [24 : 0] inputFIFO_enqReq_ehrReg;
  wire [24 : 0] inputFIFO_enqReq_ehrReg$D_IN;
  wire inputFIFO_enqReq_ehrReg$EN;

  // register inputFIFO_full
  reg inputFIFO_full;
  wire inputFIFO_full$D_IN, inputFIFO_full$EN;

  // register outputFIFO_clearReq_ehrReg
  reg outputFIFO_clearReq_ehrReg;
  wire outputFIFO_clearReq_ehrReg$D_IN, outputFIFO_clearReq_ehrReg$EN;

  // register outputFIFO_data_0
  reg [3 : 0] outputFIFO_data_0;
  wire [3 : 0] outputFIFO_data_0$D_IN;
  wire outputFIFO_data_0$EN;

  // register outputFIFO_data_1
  reg [3 : 0] outputFIFO_data_1;
  wire [3 : 0] outputFIFO_data_1$D_IN;
  wire outputFIFO_data_1$EN;

  // register outputFIFO_deqP
  reg outputFIFO_deqP;
  wire outputFIFO_deqP$D_IN, outputFIFO_deqP$EN;

  // register outputFIFO_deqReq_ehrReg
  reg outputFIFO_deqReq_ehrReg;
  wire outputFIFO_deqReq_ehrReg$D_IN, outputFIFO_deqReq_ehrReg$EN;

  // register outputFIFO_empty
  reg outputFIFO_empty;
  wire outputFIFO_empty$D_IN, outputFIFO_empty$EN;

  // register outputFIFO_enqP
  reg outputFIFO_enqP;
  wire outputFIFO_enqP$D_IN, outputFIFO_enqP$EN;

  // register outputFIFO_enqReq_ehrReg
  reg [4 : 0] outputFIFO_enqReq_ehrReg;
  wire [4 : 0] outputFIFO_enqReq_ehrReg$D_IN;
  wire outputFIFO_enqReq_ehrReg$EN;

  // register outputFIFO_full
  reg outputFIFO_full;
  wire outputFIFO_full$D_IN, outputFIFO_full$EN;

  // register processed
  reg processed;
  wire processed$D_IN, processed$EN;

  // register tempPixel
  reg [23 : 0] tempPixel;
  wire [23 : 0] tempPixel$D_IN;
  wire tempPixel$EN;

  // ports of submodule inputFIFO_clearReq_virtual_reg_0
  wire inputFIFO_clearReq_virtual_reg_0$D_IN,
       inputFIFO_clearReq_virtual_reg_0$EN;

  // ports of submodule inputFIFO_clearReq_virtual_reg_1
  wire inputFIFO_clearReq_virtual_reg_1$D_IN,
       inputFIFO_clearReq_virtual_reg_1$EN,
       inputFIFO_clearReq_virtual_reg_1$Q_OUT;

  // ports of submodule inputFIFO_deqReq_virtual_reg_0
  wire inputFIFO_deqReq_virtual_reg_0$D_IN, inputFIFO_deqReq_virtual_reg_0$EN;

  // ports of submodule inputFIFO_deqReq_virtual_reg_1
  wire inputFIFO_deqReq_virtual_reg_1$D_IN, inputFIFO_deqReq_virtual_reg_1$EN;

  // ports of submodule inputFIFO_deqReq_virtual_reg_2
  wire inputFIFO_deqReq_virtual_reg_2$D_IN,
       inputFIFO_deqReq_virtual_reg_2$EN,
       inputFIFO_deqReq_virtual_reg_2$Q_OUT;

  // ports of submodule inputFIFO_enqReq_virtual_reg_0
  wire inputFIFO_enqReq_virtual_reg_0$D_IN, inputFIFO_enqReq_virtual_reg_0$EN;

  // ports of submodule inputFIFO_enqReq_virtual_reg_1
  wire inputFIFO_enqReq_virtual_reg_1$D_IN, inputFIFO_enqReq_virtual_reg_1$EN;

  // ports of submodule inputFIFO_enqReq_virtual_reg_2
  wire inputFIFO_enqReq_virtual_reg_2$D_IN,
       inputFIFO_enqReq_virtual_reg_2$EN,
       inputFIFO_enqReq_virtual_reg_2$Q_OUT;

  // ports of submodule outputFIFO_clearReq_virtual_reg_0
  wire outputFIFO_clearReq_virtual_reg_0$D_IN,
       outputFIFO_clearReq_virtual_reg_0$EN;

  // ports of submodule outputFIFO_clearReq_virtual_reg_1
  wire outputFIFO_clearReq_virtual_reg_1$D_IN,
       outputFIFO_clearReq_virtual_reg_1$EN,
       outputFIFO_clearReq_virtual_reg_1$Q_OUT;

  // ports of submodule outputFIFO_deqReq_virtual_reg_0
  wire outputFIFO_deqReq_virtual_reg_0$D_IN,
       outputFIFO_deqReq_virtual_reg_0$EN;

  // ports of submodule outputFIFO_deqReq_virtual_reg_1
  wire outputFIFO_deqReq_virtual_reg_1$D_IN,
       outputFIFO_deqReq_virtual_reg_1$EN;

  // ports of submodule outputFIFO_deqReq_virtual_reg_2
  wire outputFIFO_deqReq_virtual_reg_2$D_IN,
       outputFIFO_deqReq_virtual_reg_2$EN,
       outputFIFO_deqReq_virtual_reg_2$Q_OUT;

  // ports of submodule outputFIFO_enqReq_virtual_reg_0
  wire outputFIFO_enqReq_virtual_reg_0$D_IN,
       outputFIFO_enqReq_virtual_reg_0$EN;

  // ports of submodule outputFIFO_enqReq_virtual_reg_1
  wire outputFIFO_enqReq_virtual_reg_1$D_IN,
       outputFIFO_enqReq_virtual_reg_1$EN;

  // ports of submodule outputFIFO_enqReq_virtual_reg_2
  wire outputFIFO_enqReq_virtual_reg_2$D_IN,
       outputFIFO_enqReq_virtual_reg_2$EN,
       outputFIFO_enqReq_virtual_reg_2$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_byteextract,
       CAN_FIRE_RL_inputFIFO_canonicalize,
       CAN_FIRE_RL_inputFIFO_clearReq_canonicalize,
       CAN_FIRE_RL_inputFIFO_deqReq_canonicalize,
       CAN_FIRE_RL_inputFIFO_enqReq_canonicalize,
       CAN_FIRE_RL_outputFIFO_canonicalize,
       CAN_FIRE_RL_outputFIFO_clearReq_canonicalize,
       CAN_FIRE_RL_outputFIFO_deqReq_canonicalize,
       CAN_FIRE_RL_outputFIFO_enqReq_canonicalize,
       CAN_FIRE_RL_pixelload,
       CAN_FIRE_request_put,
       CAN_FIRE_response_get,
       WILL_FIRE_RL_byteextract,
       WILL_FIRE_RL_inputFIFO_canonicalize,
       WILL_FIRE_RL_inputFIFO_clearReq_canonicalize,
       WILL_FIRE_RL_inputFIFO_deqReq_canonicalize,
       WILL_FIRE_RL_inputFIFO_enqReq_canonicalize,
       WILL_FIRE_RL_outputFIFO_canonicalize,
       WILL_FIRE_RL_outputFIFO_clearReq_canonicalize,
       WILL_FIRE_RL_outputFIFO_deqReq_canonicalize,
       WILL_FIRE_RL_outputFIFO_enqReq_canonicalize,
       WILL_FIRE_RL_pixelload,
       WILL_FIRE_request_put,
       WILL_FIRE_response_get;

  // inputs to muxes for submodule ports
  wire MUX_processed$write_1__SEL_1;

  // remaining internal signals
  reg [3 : 0] CASE_byte_count_0_tempPixel_BITS_3_TO_0_1_temp_ETC__q1,
	      SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308,
	      SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294,
	      SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279,
	      SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265,
	      SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337,
	      SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323;
  wire [23 : 0] IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27;
  wire [3 : 0] IF_outputFIFO_enqReq_wires_1_whas__48_THEN_out_ETC___d171,
	       _theResult_____2__h29562,
	       next_deqP___1__h29967,
	       v__h6889,
	       v__h7248;
  wire [2 : 0] x__h44437;
  wire IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d73,
       IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d76,
       IF_NOT_inputFIFO_enqReq_virtual_reg_2_read__1__ETC___d80,
       IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__0_ETC___d215,
       IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__0_ETC___d218,
       IF_NOT_outputFIFO_enqReq_virtual_reg_2_read__9_ETC___d224,
       IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39,
       IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13,
       IF_outputFIFO_enqReq_wires_1_whas__48_THEN_out_ETC___d157,
       _theResult_____2__h37563,
       inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72,
       next_deqP___1__h37968,
       outputFIFO_clearReq_virtual_reg_1_read__92_OR__ETC___d196,
       v__h36992,
       v__h37351;

  // action method request_put
  assign RDY_request_put = !inputFIFO_full ;
  assign CAN_FIRE_request_put = !inputFIFO_full ;
  assign WILL_FIRE_request_put = EN_request_put ;

  // actionvalue method response_get
  always@(outputFIFO_deqP or outputFIFO_data_0 or outputFIFO_data_1)
  begin
    case (outputFIFO_deqP)
      1'd0: response_get = outputFIFO_data_0;
      1'd1: response_get = outputFIFO_data_1;
    endcase
  end
  assign RDY_response_get = !outputFIFO_empty ;
  assign CAN_FIRE_response_get = !outputFIFO_empty ;
  assign WILL_FIRE_response_get = EN_response_get ;

  // submodule inputFIFO_clearReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_clearReq_virtual_reg_0(.CLK(CLK),
							    .D_IN(inputFIFO_clearReq_virtual_reg_0$D_IN),
							    .EN(inputFIFO_clearReq_virtual_reg_0$EN),
							    .Q_OUT());

  // submodule inputFIFO_clearReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_clearReq_virtual_reg_1(.CLK(CLK),
							    .D_IN(inputFIFO_clearReq_virtual_reg_1$D_IN),
							    .EN(inputFIFO_clearReq_virtual_reg_1$EN),
							    .Q_OUT(inputFIFO_clearReq_virtual_reg_1$Q_OUT));

  // submodule inputFIFO_deqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_deqReq_virtual_reg_0(.CLK(CLK),
							  .D_IN(inputFIFO_deqReq_virtual_reg_0$D_IN),
							  .EN(inputFIFO_deqReq_virtual_reg_0$EN),
							  .Q_OUT());

  // submodule inputFIFO_deqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_deqReq_virtual_reg_1(.CLK(CLK),
							  .D_IN(inputFIFO_deqReq_virtual_reg_1$D_IN),
							  .EN(inputFIFO_deqReq_virtual_reg_1$EN),
							  .Q_OUT());

  // submodule inputFIFO_deqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_deqReq_virtual_reg_2(.CLK(CLK),
							  .D_IN(inputFIFO_deqReq_virtual_reg_2$D_IN),
							  .EN(inputFIFO_deqReq_virtual_reg_2$EN),
							  .Q_OUT(inputFIFO_deqReq_virtual_reg_2$Q_OUT));

  // submodule inputFIFO_enqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_enqReq_virtual_reg_0(.CLK(CLK),
							  .D_IN(inputFIFO_enqReq_virtual_reg_0$D_IN),
							  .EN(inputFIFO_enqReq_virtual_reg_0$EN),
							  .Q_OUT());

  // submodule inputFIFO_enqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_enqReq_virtual_reg_1(.CLK(CLK),
							  .D_IN(inputFIFO_enqReq_virtual_reg_1$D_IN),
							  .EN(inputFIFO_enqReq_virtual_reg_1$EN),
							  .Q_OUT());

  // submodule inputFIFO_enqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_enqReq_virtual_reg_2(.CLK(CLK),
							  .D_IN(inputFIFO_enqReq_virtual_reg_2$D_IN),
							  .EN(inputFIFO_enqReq_virtual_reg_2$EN),
							  .Q_OUT(inputFIFO_enqReq_virtual_reg_2$Q_OUT));

  // submodule outputFIFO_clearReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_clearReq_virtual_reg_0(.CLK(CLK),
							     .D_IN(outputFIFO_clearReq_virtual_reg_0$D_IN),
							     .EN(outputFIFO_clearReq_virtual_reg_0$EN),
							     .Q_OUT());

  // submodule outputFIFO_clearReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_clearReq_virtual_reg_1(.CLK(CLK),
							     .D_IN(outputFIFO_clearReq_virtual_reg_1$D_IN),
							     .EN(outputFIFO_clearReq_virtual_reg_1$EN),
							     .Q_OUT(outputFIFO_clearReq_virtual_reg_1$Q_OUT));

  // submodule outputFIFO_deqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_deqReq_virtual_reg_0(.CLK(CLK),
							   .D_IN(outputFIFO_deqReq_virtual_reg_0$D_IN),
							   .EN(outputFIFO_deqReq_virtual_reg_0$EN),
							   .Q_OUT());

  // submodule outputFIFO_deqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_deqReq_virtual_reg_1(.CLK(CLK),
							   .D_IN(outputFIFO_deqReq_virtual_reg_1$D_IN),
							   .EN(outputFIFO_deqReq_virtual_reg_1$EN),
							   .Q_OUT());

  // submodule outputFIFO_deqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_deqReq_virtual_reg_2(.CLK(CLK),
							   .D_IN(outputFIFO_deqReq_virtual_reg_2$D_IN),
							   .EN(outputFIFO_deqReq_virtual_reg_2$EN),
							   .Q_OUT(outputFIFO_deqReq_virtual_reg_2$Q_OUT));

  // submodule outputFIFO_enqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_enqReq_virtual_reg_0(.CLK(CLK),
							   .D_IN(outputFIFO_enqReq_virtual_reg_0$D_IN),
							   .EN(outputFIFO_enqReq_virtual_reg_0$EN),
							   .Q_OUT());

  // submodule outputFIFO_enqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_enqReq_virtual_reg_1(.CLK(CLK),
							   .D_IN(outputFIFO_enqReq_virtual_reg_1$D_IN),
							   .EN(outputFIFO_enqReq_virtual_reg_1$EN),
							   .Q_OUT());

  // submodule outputFIFO_enqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_enqReq_virtual_reg_2(.CLK(CLK),
							   .D_IN(outputFIFO_enqReq_virtual_reg_2$D_IN),
							   .EN(outputFIFO_enqReq_virtual_reg_2$EN),
							   .Q_OUT(outputFIFO_enqReq_virtual_reg_2$Q_OUT));

  // rule RL_pixelload
  assign CAN_FIRE_RL_pixelload = inputFIFO_deqReq_wires_0$whas ;
  assign WILL_FIRE_RL_pixelload = inputFIFO_deqReq_wires_0$whas ;

  // rule RL_byteextract
  assign CAN_FIRE_RL_byteextract = outputFIFO_enqReq_wires_0$whas ;
  assign WILL_FIRE_RL_byteextract = outputFIFO_enqReq_wires_0$whas ;

  // rule RL_inputFIFO_canonicalize
  assign CAN_FIRE_RL_inputFIFO_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_canonicalize = 1'd1 ;

  // rule RL_inputFIFO_enqReq_canonicalize
  assign CAN_FIRE_RL_inputFIFO_enqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_enqReq_canonicalize = 1'd1 ;

  // rule RL_inputFIFO_deqReq_canonicalize
  assign CAN_FIRE_RL_inputFIFO_deqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_deqReq_canonicalize = 1'd1 ;

  // rule RL_inputFIFO_clearReq_canonicalize
  assign CAN_FIRE_RL_inputFIFO_clearReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_clearReq_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_canonicalize
  assign CAN_FIRE_RL_outputFIFO_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_enqReq_canonicalize
  assign CAN_FIRE_RL_outputFIFO_enqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_enqReq_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_deqReq_canonicalize
  assign CAN_FIRE_RL_outputFIFO_deqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_deqReq_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_clearReq_canonicalize
  assign CAN_FIRE_RL_outputFIFO_clearReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_clearReq_canonicalize = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_processed$write_1__SEL_1 =
	     WILL_FIRE_RL_byteextract && byte_count == 3'd5 ;

  // inlined wires
  assign inputFIFO_enqReq_wires_0$wget = { 1'd1, request_put } ;
  assign inputFIFO_deqReq_wires_0$whas = !inputFIFO_empty && processed ;
  assign outputFIFO_enqReq_wires_0$wget =
	     { 1'd1,
	       CASE_byte_count_0_tempPixel_BITS_3_TO_0_1_temp_ETC__q1 } ;
  assign outputFIFO_enqReq_wires_0$whas = !outputFIFO_full && !processed ;
  assign outputFIFO_deqReq_ignored_wires_2$wget =
	     EN_response_get || outputFIFO_deqReq_ehrReg ;

  // register byte_count
  assign byte_count$D_IN = (byte_count == 3'd5) ? 3'd0 : x__h44437 ;
  assign byte_count$EN = outputFIFO_enqReq_wires_0$whas ;

  // register inputFIFO_clearReq_ehrReg
  assign inputFIFO_clearReq_ehrReg$D_IN = 1'd0 ;
  assign inputFIFO_clearReq_ehrReg$EN = 1'd1 ;

  // register inputFIFO_data_0
  assign inputFIFO_data_0$D_IN =
	     (inputFIFO_enqReq_virtual_reg_2$Q_OUT ||
	      (EN_request_put ?
		 !inputFIFO_enqReq_wires_0$wget[24] :
		 !inputFIFO_enqReq_ehrReg[24])) ?
	       { EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[23:20] :
		   inputFIFO_enqReq_ehrReg[23:20],
		 EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[19:16] :
		   inputFIFO_enqReq_ehrReg[19:16],
		 EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[15:12] :
		   inputFIFO_enqReq_ehrReg[15:12],
		 EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[11:8] :
		   inputFIFO_enqReq_ehrReg[11:8],
		 EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[7:4] :
		   inputFIFO_enqReq_ehrReg[7:4],
		 EN_request_put ?
		   inputFIFO_enqReq_wires_0$wget[3:0] :
		   inputFIFO_enqReq_ehrReg[3:0] } :
	       IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_0$EN =
	     inputFIFO_enqP == 4'd0 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_1
  assign inputFIFO_data_1$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_1$EN =
	     inputFIFO_enqP == 4'd1 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_10
  assign inputFIFO_data_10$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_10$EN =
	     inputFIFO_enqP == 4'd10 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_11
  assign inputFIFO_data_11$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_11$EN =
	     inputFIFO_enqP == 4'd11 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_2
  assign inputFIFO_data_2$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_2$EN =
	     inputFIFO_enqP == 4'd2 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_3
  assign inputFIFO_data_3$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_3$EN =
	     inputFIFO_enqP == 4'd3 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_4
  assign inputFIFO_data_4$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_4$EN =
	     inputFIFO_enqP == 4'd4 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_5
  assign inputFIFO_data_5$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_5$EN =
	     inputFIFO_enqP == 4'd5 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_6
  assign inputFIFO_data_6$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_6$EN =
	     inputFIFO_enqP == 4'd6 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_7
  assign inputFIFO_data_7$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_7$EN =
	     inputFIFO_enqP == 4'd7 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_8
  assign inputFIFO_data_8$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_8$EN =
	     inputFIFO_enqP == 4'd8 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_9
  assign inputFIFO_data_9$D_IN = inputFIFO_data_0$D_IN ;
  assign inputFIFO_data_9$EN =
	     inputFIFO_enqP == 4'd9 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_deqP
  assign inputFIFO_deqP$D_IN =
	     (!inputFIFO_clearReq_virtual_reg_1$Q_OUT &&
	      inputFIFO_clearReq_ehrReg) ?
	       4'd0 :
	       _theResult_____2__h29562 ;
  assign inputFIFO_deqP$EN = 1'd1 ;

  // register inputFIFO_deqReq_ehrReg
  assign inputFIFO_deqReq_ehrReg$D_IN = 1'd0 ;
  assign inputFIFO_deqReq_ehrReg$EN = 1'd1 ;

  // register inputFIFO_empty
  assign inputFIFO_empty$D_IN =
	     !inputFIFO_clearReq_virtual_reg_1$Q_OUT &&
	     inputFIFO_clearReq_ehrReg ||
	     IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d73 &&
	     IF_NOT_inputFIFO_enqReq_virtual_reg_2_read__1__ETC___d80 ;
  assign inputFIFO_empty$EN = 1'd1 ;

  // register inputFIFO_enqP
  assign inputFIFO_enqP$D_IN =
	     (!inputFIFO_clearReq_virtual_reg_1$Q_OUT &&
	      inputFIFO_clearReq_ehrReg) ?
	       4'd0 :
	       v__h6889 ;
  assign inputFIFO_enqP$EN = 1'd1 ;

  // register inputFIFO_enqReq_ehrReg
  assign inputFIFO_enqReq_ehrReg$D_IN = 25'b0101010101010101010101010 ;
  assign inputFIFO_enqReq_ehrReg$EN = 1'd1 ;

  // register inputFIFO_full
  assign inputFIFO_full$D_IN =
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d76 ;
  assign inputFIFO_full$EN = 1'd1 ;

  // register outputFIFO_clearReq_ehrReg
  assign outputFIFO_clearReq_ehrReg$D_IN = 1'd0 ;
  assign outputFIFO_clearReq_ehrReg$EN = 1'd1 ;

  // register outputFIFO_data_0
  assign outputFIFO_data_0$D_IN =
	     IF_outputFIFO_enqReq_wires_1_whas__48_THEN_out_ETC___d171 ;
  assign outputFIFO_data_0$EN =
	     outputFIFO_enqP == 1'd0 &&
	     outputFIFO_clearReq_virtual_reg_1_read__92_OR__ETC___d196 &&
	     !outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_outputFIFO_enqReq_wires_1_whas__48_THEN_out_ETC___d157 ;

  // register outputFIFO_data_1
  assign outputFIFO_data_1$D_IN =
	     IF_outputFIFO_enqReq_wires_1_whas__48_THEN_out_ETC___d171 ;
  assign outputFIFO_data_1$EN =
	     outputFIFO_enqP == 1'd1 &&
	     outputFIFO_clearReq_virtual_reg_1_read__92_OR__ETC___d196 &&
	     !outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_outputFIFO_enqReq_wires_1_whas__48_THEN_out_ETC___d157 ;

  // register outputFIFO_deqP
  assign outputFIFO_deqP$D_IN =
	     outputFIFO_clearReq_virtual_reg_1_read__92_OR__ETC___d196 &&
	     _theResult_____2__h37563 ;
  assign outputFIFO_deqP$EN = 1'd1 ;

  // register outputFIFO_deqReq_ehrReg
  assign outputFIFO_deqReq_ehrReg$D_IN = 1'd0 ;
  assign outputFIFO_deqReq_ehrReg$EN = 1'd1 ;

  // register outputFIFO_empty
  assign outputFIFO_empty$D_IN =
	     !outputFIFO_clearReq_virtual_reg_1$Q_OUT &&
	     outputFIFO_clearReq_ehrReg ||
	     IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__0_ETC___d215 &&
	     IF_NOT_outputFIFO_enqReq_virtual_reg_2_read__9_ETC___d224 ;
  assign outputFIFO_empty$EN = 1'd1 ;

  // register outputFIFO_enqP
  assign outputFIFO_enqP$D_IN =
	     outputFIFO_clearReq_virtual_reg_1_read__92_OR__ETC___d196 &&
	     v__h36992 ;
  assign outputFIFO_enqP$EN = 1'd1 ;

  // register outputFIFO_enqReq_ehrReg
  assign outputFIFO_enqReq_ehrReg$D_IN = 5'b01010 ;
  assign outputFIFO_enqReq_ehrReg$EN = 1'd1 ;

  // register outputFIFO_full
  assign outputFIFO_full$D_IN =
	     outputFIFO_clearReq_virtual_reg_1_read__92_OR__ETC___d196 &&
	     IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__0_ETC___d218 ;
  assign outputFIFO_full$EN = 1'd1 ;

  // register processed
  assign processed$D_IN = MUX_processed$write_1__SEL_1 ;
  assign processed$EN =
	     WILL_FIRE_RL_byteextract && byte_count == 3'd5 ||
	     WILL_FIRE_RL_pixelload ;

  // register tempPixel
  assign tempPixel$D_IN =
	     { SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265,
	       SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279,
	       SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294,
	       SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308,
	       SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323,
	       SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 } ;
  assign tempPixel$EN = inputFIFO_deqReq_wires_0$whas ;

  // submodule inputFIFO_clearReq_virtual_reg_0
  assign inputFIFO_clearReq_virtual_reg_0$D_IN = 1'b0 ;
  assign inputFIFO_clearReq_virtual_reg_0$EN = 1'b0 ;

  // submodule inputFIFO_clearReq_virtual_reg_1
  assign inputFIFO_clearReq_virtual_reg_1$D_IN = 1'd0 ;
  assign inputFIFO_clearReq_virtual_reg_1$EN = 1'd1 ;

  // submodule inputFIFO_deqReq_virtual_reg_0
  assign inputFIFO_deqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign inputFIFO_deqReq_virtual_reg_0$EN = inputFIFO_deqReq_wires_0$whas ;

  // submodule inputFIFO_deqReq_virtual_reg_1
  assign inputFIFO_deqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign inputFIFO_deqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule inputFIFO_deqReq_virtual_reg_2
  assign inputFIFO_deqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign inputFIFO_deqReq_virtual_reg_2$EN = 1'd1 ;

  // submodule inputFIFO_enqReq_virtual_reg_0
  assign inputFIFO_enqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign inputFIFO_enqReq_virtual_reg_0$EN = EN_request_put ;

  // submodule inputFIFO_enqReq_virtual_reg_1
  assign inputFIFO_enqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign inputFIFO_enqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule inputFIFO_enqReq_virtual_reg_2
  assign inputFIFO_enqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign inputFIFO_enqReq_virtual_reg_2$EN = 1'd1 ;

  // submodule outputFIFO_clearReq_virtual_reg_0
  assign outputFIFO_clearReq_virtual_reg_0$D_IN = 1'b0 ;
  assign outputFIFO_clearReq_virtual_reg_0$EN = 1'b0 ;

  // submodule outputFIFO_clearReq_virtual_reg_1
  assign outputFIFO_clearReq_virtual_reg_1$D_IN = 1'd0 ;
  assign outputFIFO_clearReq_virtual_reg_1$EN = 1'd1 ;

  // submodule outputFIFO_deqReq_virtual_reg_0
  assign outputFIFO_deqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign outputFIFO_deqReq_virtual_reg_0$EN = EN_response_get ;

  // submodule outputFIFO_deqReq_virtual_reg_1
  assign outputFIFO_deqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign outputFIFO_deqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule outputFIFO_deqReq_virtual_reg_2
  assign outputFIFO_deqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign outputFIFO_deqReq_virtual_reg_2$EN = 1'd1 ;

  // submodule outputFIFO_enqReq_virtual_reg_0
  assign outputFIFO_enqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign outputFIFO_enqReq_virtual_reg_0$EN = outputFIFO_enqReq_wires_0$whas ;

  // submodule outputFIFO_enqReq_virtual_reg_1
  assign outputFIFO_enqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign outputFIFO_enqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule outputFIFO_enqReq_virtual_reg_2
  assign outputFIFO_enqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign outputFIFO_enqReq_virtual_reg_2$EN = 1'd1 ;

  // remaining internal signals
  assign IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d73 =
	     _theResult_____2__h29562 == v__h6889 ;
  assign IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d76 =
	     IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d73 &&
	     (!inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ||
	      inputFIFO_full) ;
  assign IF_NOT_inputFIFO_enqReq_virtual_reg_2_read__1__ETC___d80 =
	     (!inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13) ?
	       inputFIFO_empty :
	       !inputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	       IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39 ||
	       inputFIFO_empty ;
  assign IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__0_ETC___d215 =
	     _theResult_____2__h37563 == v__h36992 ;
  assign IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__0_ETC___d218 =
	     IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__0_ETC___d215 &&
	     (!outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_outputFIFO_enqReq_wires_1_whas__48_THEN_out_ETC___d157 ||
	      outputFIFO_full) ;
  assign IF_NOT_outputFIFO_enqReq_virtual_reg_2_read__9_ETC___d224 =
	     (!outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_outputFIFO_enqReq_wires_1_whas__48_THEN_out_ETC___d157) ?
	       outputFIFO_empty :
	       !outputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	       outputFIFO_deqReq_ignored_wires_2$wget ||
	       outputFIFO_empty ;
  assign IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39 =
	     inputFIFO_deqReq_wires_0$whas || inputFIFO_deqReq_ehrReg ;
  assign IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 =
	     EN_request_put ?
	       inputFIFO_enqReq_wires_0$wget[24] :
	       inputFIFO_enqReq_ehrReg[24] ;
  assign IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 =
	     EN_request_put ?
	       inputFIFO_enqReq_wires_0$wget[23:0] :
	       inputFIFO_enqReq_ehrReg[23:0] ;
  assign IF_outputFIFO_enqReq_wires_1_whas__48_THEN_out_ETC___d157 =
	     outputFIFO_enqReq_wires_0$whas ?
	       outputFIFO_enqReq_wires_0$wget[4] :
	       outputFIFO_enqReq_ehrReg[4] ;
  assign IF_outputFIFO_enqReq_wires_1_whas__48_THEN_out_ETC___d171 =
	     outputFIFO_enqReq_wires_0$whas ?
	       outputFIFO_enqReq_wires_0$wget[3:0] :
	       outputFIFO_enqReq_ehrReg[3:0] ;
  assign _theResult_____2__h29562 =
	     (!inputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39) ?
	       next_deqP___1__h29967 :
	       inputFIFO_deqP ;
  assign _theResult_____2__h37563 =
	     (!outputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	      outputFIFO_deqReq_ignored_wires_2$wget) ?
	       next_deqP___1__h37968 :
	       outputFIFO_deqP ;
  assign inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 =
	     inputFIFO_clearReq_virtual_reg_1$Q_OUT ||
	     !inputFIFO_clearReq_ehrReg ;
  assign next_deqP___1__h29967 =
	     (inputFIFO_deqP == 4'd11) ? 4'd0 : inputFIFO_deqP + 4'd1 ;
  assign next_deqP___1__h37968 = outputFIFO_deqP + 1'd1 ;
  assign outputFIFO_clearReq_virtual_reg_1_read__92_OR__ETC___d196 =
	     outputFIFO_clearReq_virtual_reg_1$Q_OUT ||
	     !outputFIFO_clearReq_ehrReg ;
  assign v__h36992 =
	     (!outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_outputFIFO_enqReq_wires_1_whas__48_THEN_out_ETC___d157) ?
	       v__h37351 :
	       outputFIFO_enqP ;
  assign v__h37351 = outputFIFO_enqP + 1'd1 ;
  assign v__h6889 =
	     (!inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13) ?
	       v__h7248 :
	       inputFIFO_enqP ;
  assign v__h7248 = (inputFIFO_enqP == 4'd11) ? 4'd0 : inputFIFO_enqP + 4'd1 ;
  assign x__h44437 = byte_count + 3'd1 ;
  always@(byte_count or tempPixel)
  begin
    case (byte_count)
      3'd0:
	  CASE_byte_count_0_tempPixel_BITS_3_TO_0_1_temp_ETC__q1 =
	      tempPixel[3:0];
      3'd1:
	  CASE_byte_count_0_tempPixel_BITS_3_TO_0_1_temp_ETC__q1 =
	      tempPixel[7:4];
      3'd2:
	  CASE_byte_count_0_tempPixel_BITS_3_TO_0_1_temp_ETC__q1 =
	      tempPixel[11:8];
      3'd3:
	  CASE_byte_count_0_tempPixel_BITS_3_TO_0_1_temp_ETC__q1 =
	      tempPixel[15:12];
      3'd4:
	  CASE_byte_count_0_tempPixel_BITS_3_TO_0_1_temp_ETC__q1 =
	      tempPixel[19:16];
      3'd5:
	  CASE_byte_count_0_tempPixel_BITS_3_TO_0_1_temp_ETC__q1 =
	      tempPixel[23:20];
      default: CASE_byte_count_0_tempPixel_BITS_3_TO_0_1_temp_ETC__q1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(inputFIFO_deqP or
	  inputFIFO_data_0 or
	  inputFIFO_data_1 or
	  inputFIFO_data_2 or
	  inputFIFO_data_3 or
	  inputFIFO_data_4 or
	  inputFIFO_data_5 or
	  inputFIFO_data_6 or
	  inputFIFO_data_7 or
	  inputFIFO_data_8 or
	  inputFIFO_data_9 or inputFIFO_data_10 or inputFIFO_data_11)
  begin
    case (inputFIFO_deqP)
      4'd0:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_0[23:20];
      4'd1:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_1[23:20];
      4'd2:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_2[23:20];
      4'd3:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_3[23:20];
      4'd4:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_4[23:20];
      4'd5:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_5[23:20];
      4'd6:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_6[23:20];
      4'd7:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_7[23:20];
      4'd8:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_8[23:20];
      4'd9:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_9[23:20];
      4'd10:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_10[23:20];
      4'd11:
	  SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
	      inputFIFO_data_11[23:20];
      default: SEL_ARR_inputFIFO_data_0_40_BITS_23_TO_20_41_i_ETC___d265 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(inputFIFO_deqP or
	  inputFIFO_data_0 or
	  inputFIFO_data_1 or
	  inputFIFO_data_2 or
	  inputFIFO_data_3 or
	  inputFIFO_data_4 or
	  inputFIFO_data_5 or
	  inputFIFO_data_6 or
	  inputFIFO_data_7 or
	  inputFIFO_data_8 or
	  inputFIFO_data_9 or inputFIFO_data_10 or inputFIFO_data_11)
  begin
    case (inputFIFO_deqP)
      4'd0:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_0[19:16];
      4'd1:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_1[19:16];
      4'd2:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_2[19:16];
      4'd3:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_3[19:16];
      4'd4:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_4[19:16];
      4'd5:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_5[19:16];
      4'd6:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_6[19:16];
      4'd7:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_7[19:16];
      4'd8:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_8[19:16];
      4'd9:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_9[19:16];
      4'd10:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_10[19:16];
      4'd11:
	  SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
	      inputFIFO_data_11[19:16];
      default: SEL_ARR_inputFIFO_data_0_40_BITS_19_TO_16_66_i_ETC___d279 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(inputFIFO_deqP or
	  inputFIFO_data_0 or
	  inputFIFO_data_1 or
	  inputFIFO_data_2 or
	  inputFIFO_data_3 or
	  inputFIFO_data_4 or
	  inputFIFO_data_5 or
	  inputFIFO_data_6 or
	  inputFIFO_data_7 or
	  inputFIFO_data_8 or
	  inputFIFO_data_9 or inputFIFO_data_10 or inputFIFO_data_11)
  begin
    case (inputFIFO_deqP)
      4'd0:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_0[15:12];
      4'd1:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_1[15:12];
      4'd2:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_2[15:12];
      4'd3:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_3[15:12];
      4'd4:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_4[15:12];
      4'd5:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_5[15:12];
      4'd6:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_6[15:12];
      4'd7:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_7[15:12];
      4'd8:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_8[15:12];
      4'd9:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_9[15:12];
      4'd10:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_10[15:12];
      4'd11:
	  SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
	      inputFIFO_data_11[15:12];
      default: SEL_ARR_inputFIFO_data_0_40_BITS_15_TO_12_81_i_ETC___d294 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(inputFIFO_deqP or
	  inputFIFO_data_0 or
	  inputFIFO_data_1 or
	  inputFIFO_data_2 or
	  inputFIFO_data_3 or
	  inputFIFO_data_4 or
	  inputFIFO_data_5 or
	  inputFIFO_data_6 or
	  inputFIFO_data_7 or
	  inputFIFO_data_8 or
	  inputFIFO_data_9 or inputFIFO_data_10 or inputFIFO_data_11)
  begin
    case (inputFIFO_deqP)
      4'd0:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_0[3:0];
      4'd1:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_1[3:0];
      4'd2:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_2[3:0];
      4'd3:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_3[3:0];
      4'd4:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_4[3:0];
      4'd5:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_5[3:0];
      4'd6:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_6[3:0];
      4'd7:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_7[3:0];
      4'd8:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_8[3:0];
      4'd9:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_9[3:0];
      4'd10:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_10[3:0];
      4'd11:
	  SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
	      inputFIFO_data_11[3:0];
      default: SEL_ARR_inputFIFO_data_0_40_BITS_3_TO_0_24_inp_ETC___d337 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(inputFIFO_deqP or
	  inputFIFO_data_0 or
	  inputFIFO_data_1 or
	  inputFIFO_data_2 or
	  inputFIFO_data_3 or
	  inputFIFO_data_4 or
	  inputFIFO_data_5 or
	  inputFIFO_data_6 or
	  inputFIFO_data_7 or
	  inputFIFO_data_8 or
	  inputFIFO_data_9 or inputFIFO_data_10 or inputFIFO_data_11)
  begin
    case (inputFIFO_deqP)
      4'd0:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_0[11:8];
      4'd1:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_1[11:8];
      4'd2:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_2[11:8];
      4'd3:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_3[11:8];
      4'd4:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_4[11:8];
      4'd5:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_5[11:8];
      4'd6:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_6[11:8];
      4'd7:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_7[11:8];
      4'd8:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_8[11:8];
      4'd9:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_9[11:8];
      4'd10:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_10[11:8];
      4'd11:
	  SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
	      inputFIFO_data_11[11:8];
      default: SEL_ARR_inputFIFO_data_0_40_BITS_11_TO_8_95_in_ETC___d308 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(inputFIFO_deqP or
	  inputFIFO_data_0 or
	  inputFIFO_data_1 or
	  inputFIFO_data_2 or
	  inputFIFO_data_3 or
	  inputFIFO_data_4 or
	  inputFIFO_data_5 or
	  inputFIFO_data_6 or
	  inputFIFO_data_7 or
	  inputFIFO_data_8 or
	  inputFIFO_data_9 or inputFIFO_data_10 or inputFIFO_data_11)
  begin
    case (inputFIFO_deqP)
      4'd0:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_0[7:4];
      4'd1:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_1[7:4];
      4'd2:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_2[7:4];
      4'd3:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_3[7:4];
      4'd4:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_4[7:4];
      4'd5:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_5[7:4];
      4'd6:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_6[7:4];
      4'd7:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_7[7:4];
      4'd8:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_8[7:4];
      4'd9:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_9[7:4];
      4'd10:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_10[7:4];
      4'd11:
	  SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
	      inputFIFO_data_11[7:4];
      default: SEL_ARR_inputFIFO_data_0_40_BITS_7_TO_4_10_inp_ETC___d323 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        byte_count <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY 4'd0;
	inputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inputFIFO_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY 4'd0;
	inputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	inputFIFO_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	outputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 5'd10;
	outputFIFO_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	processed <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (byte_count$EN)
	  byte_count <= `BSV_ASSIGNMENT_DELAY byte_count$D_IN;
	if (inputFIFO_clearReq_ehrReg$EN)
	  inputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      inputFIFO_clearReq_ehrReg$D_IN;
	if (inputFIFO_deqP$EN)
	  inputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY inputFIFO_deqP$D_IN;
	if (inputFIFO_deqReq_ehrReg$EN)
	  inputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      inputFIFO_deqReq_ehrReg$D_IN;
	if (inputFIFO_empty$EN)
	  inputFIFO_empty <= `BSV_ASSIGNMENT_DELAY inputFIFO_empty$D_IN;
	if (inputFIFO_enqP$EN)
	  inputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY inputFIFO_enqP$D_IN;
	if (inputFIFO_enqReq_ehrReg$EN)
	  inputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      inputFIFO_enqReq_ehrReg$D_IN;
	if (inputFIFO_full$EN)
	  inputFIFO_full <= `BSV_ASSIGNMENT_DELAY inputFIFO_full$D_IN;
	if (outputFIFO_clearReq_ehrReg$EN)
	  outputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      outputFIFO_clearReq_ehrReg$D_IN;
	if (outputFIFO_deqP$EN)
	  outputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY outputFIFO_deqP$D_IN;
	if (outputFIFO_deqReq_ehrReg$EN)
	  outputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      outputFIFO_deqReq_ehrReg$D_IN;
	if (outputFIFO_empty$EN)
	  outputFIFO_empty <= `BSV_ASSIGNMENT_DELAY outputFIFO_empty$D_IN;
	if (outputFIFO_enqP$EN)
	  outputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY outputFIFO_enqP$D_IN;
	if (outputFIFO_enqReq_ehrReg$EN)
	  outputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      outputFIFO_enqReq_ehrReg$D_IN;
	if (outputFIFO_full$EN)
	  outputFIFO_full <= `BSV_ASSIGNMENT_DELAY outputFIFO_full$D_IN;
	if (processed$EN) processed <= `BSV_ASSIGNMENT_DELAY processed$D_IN;
      end
    if (inputFIFO_data_0$EN)
      inputFIFO_data_0 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_0$D_IN;
    if (inputFIFO_data_1$EN)
      inputFIFO_data_1 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_1$D_IN;
    if (inputFIFO_data_10$EN)
      inputFIFO_data_10 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_10$D_IN;
    if (inputFIFO_data_11$EN)
      inputFIFO_data_11 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_11$D_IN;
    if (inputFIFO_data_2$EN)
      inputFIFO_data_2 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_2$D_IN;
    if (inputFIFO_data_3$EN)
      inputFIFO_data_3 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_3$D_IN;
    if (inputFIFO_data_4$EN)
      inputFIFO_data_4 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_4$D_IN;
    if (inputFIFO_data_5$EN)
      inputFIFO_data_5 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_5$D_IN;
    if (inputFIFO_data_6$EN)
      inputFIFO_data_6 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_6$D_IN;
    if (inputFIFO_data_7$EN)
      inputFIFO_data_7 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_7$D_IN;
    if (inputFIFO_data_8$EN)
      inputFIFO_data_8 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_8$D_IN;
    if (inputFIFO_data_9$EN)
      inputFIFO_data_9 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_9$D_IN;
    if (outputFIFO_data_0$EN)
      outputFIFO_data_0 <= `BSV_ASSIGNMENT_DELAY outputFIFO_data_0$D_IN;
    if (outputFIFO_data_1$EN)
      outputFIFO_data_1 <= `BSV_ASSIGNMENT_DELAY outputFIFO_data_1$D_IN;
    if (tempPixel$EN) tempPixel <= `BSV_ASSIGNMENT_DELAY tempPixel$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    byte_count = 3'h2;
    inputFIFO_clearReq_ehrReg = 1'h0;
    inputFIFO_data_0 = 24'hAAAAAA;
    inputFIFO_data_1 = 24'hAAAAAA;
    inputFIFO_data_10 = 24'hAAAAAA;
    inputFIFO_data_11 = 24'hAAAAAA;
    inputFIFO_data_2 = 24'hAAAAAA;
    inputFIFO_data_3 = 24'hAAAAAA;
    inputFIFO_data_4 = 24'hAAAAAA;
    inputFIFO_data_5 = 24'hAAAAAA;
    inputFIFO_data_6 = 24'hAAAAAA;
    inputFIFO_data_7 = 24'hAAAAAA;
    inputFIFO_data_8 = 24'hAAAAAA;
    inputFIFO_data_9 = 24'hAAAAAA;
    inputFIFO_deqP = 4'hA;
    inputFIFO_deqReq_ehrReg = 1'h0;
    inputFIFO_empty = 1'h0;
    inputFIFO_enqP = 4'hA;
    inputFIFO_enqReq_ehrReg = 25'h0AAAAAA;
    inputFIFO_full = 1'h0;
    outputFIFO_clearReq_ehrReg = 1'h0;
    outputFIFO_data_0 = 4'hA;
    outputFIFO_data_1 = 4'hA;
    outputFIFO_deqP = 1'h0;
    outputFIFO_deqReq_ehrReg = 1'h0;
    outputFIFO_empty = 1'h0;
    outputFIFO_enqP = 1'h0;
    outputFIFO_enqReq_ehrReg = 5'h0A;
    outputFIFO_full = 1'h0;
    processed = 1'h0;
    tempPixel = 24'hAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDeserializerPTB

