//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Mon Apr 18 18:33:07 EDT 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1
// response_get                   O    24
// RDY_response_get               O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I   512
// EN_request_put                 I     1
// EN_response_get                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDeserializerWTP(CLK,
			 RST_N,

			 request_put,
			 EN_request_put,
			 RDY_request_put,

			 EN_response_get,
			 response_get,
			 RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [511 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [23 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [23 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // inlined wires
  wire [512 : 0] inputFIFO_enqReq_wires_0$wget;
  wire [24 : 0] outputFIFO_enqReq_wires_0$wget;
  wire inputFIFO_deqReq_wires_0$whas,
       outputFIFO_deqReq_ignored_wires_2$wget,
       outputFIFO_enqReq_wires_0$whas;

  // register inputFIFO_clearReq_ehrReg
  reg inputFIFO_clearReq_ehrReg;
  wire inputFIFO_clearReq_ehrReg$D_IN, inputFIFO_clearReq_ehrReg$EN;

  // register inputFIFO_data_0
  reg [511 : 0] inputFIFO_data_0;
  wire [511 : 0] inputFIFO_data_0$D_IN;
  wire inputFIFO_data_0$EN;

  // register inputFIFO_data_1
  reg [511 : 0] inputFIFO_data_1;
  wire [511 : 0] inputFIFO_data_1$D_IN;
  wire inputFIFO_data_1$EN;

  // register inputFIFO_data_10
  reg [511 : 0] inputFIFO_data_10;
  wire [511 : 0] inputFIFO_data_10$D_IN;
  wire inputFIFO_data_10$EN;

  // register inputFIFO_data_11
  reg [511 : 0] inputFIFO_data_11;
  wire [511 : 0] inputFIFO_data_11$D_IN;
  wire inputFIFO_data_11$EN;

  // register inputFIFO_data_12
  reg [511 : 0] inputFIFO_data_12;
  wire [511 : 0] inputFIFO_data_12$D_IN;
  wire inputFIFO_data_12$EN;

  // register inputFIFO_data_13
  reg [511 : 0] inputFIFO_data_13;
  wire [511 : 0] inputFIFO_data_13$D_IN;
  wire inputFIFO_data_13$EN;

  // register inputFIFO_data_14
  reg [511 : 0] inputFIFO_data_14;
  wire [511 : 0] inputFIFO_data_14$D_IN;
  wire inputFIFO_data_14$EN;

  // register inputFIFO_data_15
  reg [511 : 0] inputFIFO_data_15;
  wire [511 : 0] inputFIFO_data_15$D_IN;
  wire inputFIFO_data_15$EN;

  // register inputFIFO_data_16
  reg [511 : 0] inputFIFO_data_16;
  wire [511 : 0] inputFIFO_data_16$D_IN;
  wire inputFIFO_data_16$EN;

  // register inputFIFO_data_17
  reg [511 : 0] inputFIFO_data_17;
  wire [511 : 0] inputFIFO_data_17$D_IN;
  wire inputFIFO_data_17$EN;

  // register inputFIFO_data_18
  reg [511 : 0] inputFIFO_data_18;
  wire [511 : 0] inputFIFO_data_18$D_IN;
  wire inputFIFO_data_18$EN;

  // register inputFIFO_data_19
  reg [511 : 0] inputFIFO_data_19;
  wire [511 : 0] inputFIFO_data_19$D_IN;
  wire inputFIFO_data_19$EN;

  // register inputFIFO_data_2
  reg [511 : 0] inputFIFO_data_2;
  wire [511 : 0] inputFIFO_data_2$D_IN;
  wire inputFIFO_data_2$EN;

  // register inputFIFO_data_20
  reg [511 : 0] inputFIFO_data_20;
  wire [511 : 0] inputFIFO_data_20$D_IN;
  wire inputFIFO_data_20$EN;

  // register inputFIFO_data_21
  reg [511 : 0] inputFIFO_data_21;
  wire [511 : 0] inputFIFO_data_21$D_IN;
  wire inputFIFO_data_21$EN;

  // register inputFIFO_data_22
  reg [511 : 0] inputFIFO_data_22;
  wire [511 : 0] inputFIFO_data_22$D_IN;
  wire inputFIFO_data_22$EN;

  // register inputFIFO_data_23
  reg [511 : 0] inputFIFO_data_23;
  wire [511 : 0] inputFIFO_data_23$D_IN;
  wire inputFIFO_data_23$EN;

  // register inputFIFO_data_24
  reg [511 : 0] inputFIFO_data_24;
  wire [511 : 0] inputFIFO_data_24$D_IN;
  wire inputFIFO_data_24$EN;

  // register inputFIFO_data_25
  reg [511 : 0] inputFIFO_data_25;
  wire [511 : 0] inputFIFO_data_25$D_IN;
  wire inputFIFO_data_25$EN;

  // register inputFIFO_data_26
  reg [511 : 0] inputFIFO_data_26;
  wire [511 : 0] inputFIFO_data_26$D_IN;
  wire inputFIFO_data_26$EN;

  // register inputFIFO_data_27
  reg [511 : 0] inputFIFO_data_27;
  wire [511 : 0] inputFIFO_data_27$D_IN;
  wire inputFIFO_data_27$EN;

  // register inputFIFO_data_28
  reg [511 : 0] inputFIFO_data_28;
  wire [511 : 0] inputFIFO_data_28$D_IN;
  wire inputFIFO_data_28$EN;

  // register inputFIFO_data_29
  reg [511 : 0] inputFIFO_data_29;
  wire [511 : 0] inputFIFO_data_29$D_IN;
  wire inputFIFO_data_29$EN;

  // register inputFIFO_data_3
  reg [511 : 0] inputFIFO_data_3;
  wire [511 : 0] inputFIFO_data_3$D_IN;
  wire inputFIFO_data_3$EN;

  // register inputFIFO_data_30
  reg [511 : 0] inputFIFO_data_30;
  wire [511 : 0] inputFIFO_data_30$D_IN;
  wire inputFIFO_data_30$EN;

  // register inputFIFO_data_31
  reg [511 : 0] inputFIFO_data_31;
  wire [511 : 0] inputFIFO_data_31$D_IN;
  wire inputFIFO_data_31$EN;

  // register inputFIFO_data_4
  reg [511 : 0] inputFIFO_data_4;
  wire [511 : 0] inputFIFO_data_4$D_IN;
  wire inputFIFO_data_4$EN;

  // register inputFIFO_data_5
  reg [511 : 0] inputFIFO_data_5;
  wire [511 : 0] inputFIFO_data_5$D_IN;
  wire inputFIFO_data_5$EN;

  // register inputFIFO_data_6
  reg [511 : 0] inputFIFO_data_6;
  wire [511 : 0] inputFIFO_data_6$D_IN;
  wire inputFIFO_data_6$EN;

  // register inputFIFO_data_7
  reg [511 : 0] inputFIFO_data_7;
  wire [511 : 0] inputFIFO_data_7$D_IN;
  wire inputFIFO_data_7$EN;

  // register inputFIFO_data_8
  reg [511 : 0] inputFIFO_data_8;
  wire [511 : 0] inputFIFO_data_8$D_IN;
  wire inputFIFO_data_8$EN;

  // register inputFIFO_data_9
  reg [511 : 0] inputFIFO_data_9;
  wire [511 : 0] inputFIFO_data_9$D_IN;
  wire inputFIFO_data_9$EN;

  // register inputFIFO_deqP
  reg [4 : 0] inputFIFO_deqP;
  wire [4 : 0] inputFIFO_deqP$D_IN;
  wire inputFIFO_deqP$EN;

  // register inputFIFO_deqReq_ehrReg
  reg inputFIFO_deqReq_ehrReg;
  wire inputFIFO_deqReq_ehrReg$D_IN, inputFIFO_deqReq_ehrReg$EN;

  // register inputFIFO_empty
  reg inputFIFO_empty;
  wire inputFIFO_empty$D_IN, inputFIFO_empty$EN;

  // register inputFIFO_enqP
  reg [4 : 0] inputFIFO_enqP;
  wire [4 : 0] inputFIFO_enqP$D_IN;
  wire inputFIFO_enqP$EN;

  // register inputFIFO_enqReq_ehrReg
  reg [512 : 0] inputFIFO_enqReq_ehrReg;
  wire [512 : 0] inputFIFO_enqReq_ehrReg$D_IN;
  wire inputFIFO_enqReq_ehrReg$EN;

  // register inputFIFO_full
  reg inputFIFO_full;
  wire inputFIFO_full$D_IN, inputFIFO_full$EN;

  // register outputFIFO_clearReq_ehrReg
  reg outputFIFO_clearReq_ehrReg;
  wire outputFIFO_clearReq_ehrReg$D_IN, outputFIFO_clearReq_ehrReg$EN;

  // register outputFIFO_data_0
  reg [23 : 0] outputFIFO_data_0;
  wire [23 : 0] outputFIFO_data_0$D_IN;
  wire outputFIFO_data_0$EN;

  // register outputFIFO_data_1
  reg [23 : 0] outputFIFO_data_1;
  wire [23 : 0] outputFIFO_data_1$D_IN;
  wire outputFIFO_data_1$EN;

  // register outputFIFO_deqP
  reg outputFIFO_deqP;
  wire outputFIFO_deqP$D_IN, outputFIFO_deqP$EN;

  // register outputFIFO_deqReq_ehrReg
  reg outputFIFO_deqReq_ehrReg;
  wire outputFIFO_deqReq_ehrReg$D_IN, outputFIFO_deqReq_ehrReg$EN;

  // register outputFIFO_empty
  reg outputFIFO_empty;
  wire outputFIFO_empty$D_IN, outputFIFO_empty$EN;

  // register outputFIFO_enqP
  reg outputFIFO_enqP;
  wire outputFIFO_enqP$D_IN, outputFIFO_enqP$EN;

  // register outputFIFO_enqReq_ehrReg
  reg [24 : 0] outputFIFO_enqReq_ehrReg;
  wire [24 : 0] outputFIFO_enqReq_ehrReg$D_IN;
  wire outputFIFO_enqReq_ehrReg$EN;

  // register outputFIFO_full
  reg outputFIFO_full;
  wire outputFIFO_full$D_IN, outputFIFO_full$EN;

  // register pixel_count
  reg [3 : 0] pixel_count;
  wire [3 : 0] pixel_count$D_IN;
  wire pixel_count$EN;

  // register processed
  reg processed;
  wire processed$D_IN, processed$EN;

  // register word
  reg [383 : 0] word;
  wire [383 : 0] word$D_IN;
  wire word$EN;

  // ports of submodule inputFIFO_clearReq_virtual_reg_0
  wire inputFIFO_clearReq_virtual_reg_0$D_IN,
       inputFIFO_clearReq_virtual_reg_0$EN;

  // ports of submodule inputFIFO_clearReq_virtual_reg_1
  wire inputFIFO_clearReq_virtual_reg_1$D_IN,
       inputFIFO_clearReq_virtual_reg_1$EN,
       inputFIFO_clearReq_virtual_reg_1$Q_OUT;

  // ports of submodule inputFIFO_deqReq_virtual_reg_0
  wire inputFIFO_deqReq_virtual_reg_0$D_IN, inputFIFO_deqReq_virtual_reg_0$EN;

  // ports of submodule inputFIFO_deqReq_virtual_reg_1
  wire inputFIFO_deqReq_virtual_reg_1$D_IN, inputFIFO_deqReq_virtual_reg_1$EN;

  // ports of submodule inputFIFO_deqReq_virtual_reg_2
  wire inputFIFO_deqReq_virtual_reg_2$D_IN,
       inputFIFO_deqReq_virtual_reg_2$EN,
       inputFIFO_deqReq_virtual_reg_2$Q_OUT;

  // ports of submodule inputFIFO_enqReq_virtual_reg_0
  wire inputFIFO_enqReq_virtual_reg_0$D_IN, inputFIFO_enqReq_virtual_reg_0$EN;

  // ports of submodule inputFIFO_enqReq_virtual_reg_1
  wire inputFIFO_enqReq_virtual_reg_1$D_IN, inputFIFO_enqReq_virtual_reg_1$EN;

  // ports of submodule inputFIFO_enqReq_virtual_reg_2
  wire inputFIFO_enqReq_virtual_reg_2$D_IN,
       inputFIFO_enqReq_virtual_reg_2$EN,
       inputFIFO_enqReq_virtual_reg_2$Q_OUT;

  // ports of submodule outputFIFO_clearReq_virtual_reg_0
  wire outputFIFO_clearReq_virtual_reg_0$D_IN,
       outputFIFO_clearReq_virtual_reg_0$EN;

  // ports of submodule outputFIFO_clearReq_virtual_reg_1
  wire outputFIFO_clearReq_virtual_reg_1$D_IN,
       outputFIFO_clearReq_virtual_reg_1$EN,
       outputFIFO_clearReq_virtual_reg_1$Q_OUT;

  // ports of submodule outputFIFO_deqReq_virtual_reg_0
  wire outputFIFO_deqReq_virtual_reg_0$D_IN,
       outputFIFO_deqReq_virtual_reg_0$EN;

  // ports of submodule outputFIFO_deqReq_virtual_reg_1
  wire outputFIFO_deqReq_virtual_reg_1$D_IN,
       outputFIFO_deqReq_virtual_reg_1$EN;

  // ports of submodule outputFIFO_deqReq_virtual_reg_2
  wire outputFIFO_deqReq_virtual_reg_2$D_IN,
       outputFIFO_deqReq_virtual_reg_2$EN,
       outputFIFO_deqReq_virtual_reg_2$Q_OUT;

  // ports of submodule outputFIFO_enqReq_virtual_reg_0
  wire outputFIFO_enqReq_virtual_reg_0$D_IN,
       outputFIFO_enqReq_virtual_reg_0$EN;

  // ports of submodule outputFIFO_enqReq_virtual_reg_1
  wire outputFIFO_enqReq_virtual_reg_1$D_IN,
       outputFIFO_enqReq_virtual_reg_1$EN;

  // ports of submodule outputFIFO_enqReq_virtual_reg_2
  wire outputFIFO_enqReq_virtual_reg_2$D_IN,
       outputFIFO_enqReq_virtual_reg_2$EN,
       outputFIFO_enqReq_virtual_reg_2$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_inputFIFO_canonicalize,
       CAN_FIRE_RL_inputFIFO_clearReq_canonicalize,
       CAN_FIRE_RL_inputFIFO_deqReq_canonicalize,
       CAN_FIRE_RL_inputFIFO_enqReq_canonicalize,
       CAN_FIRE_RL_outputFIFO_canonicalize,
       CAN_FIRE_RL_outputFIFO_clearReq_canonicalize,
       CAN_FIRE_RL_outputFIFO_deqReq_canonicalize,
       CAN_FIRE_RL_outputFIFO_enqReq_canonicalize,
       CAN_FIRE_RL_pixelextract,
       CAN_FIRE_RL_wordload,
       CAN_FIRE_request_put,
       CAN_FIRE_response_get,
       WILL_FIRE_RL_inputFIFO_canonicalize,
       WILL_FIRE_RL_inputFIFO_clearReq_canonicalize,
       WILL_FIRE_RL_inputFIFO_deqReq_canonicalize,
       WILL_FIRE_RL_inputFIFO_enqReq_canonicalize,
       WILL_FIRE_RL_outputFIFO_canonicalize,
       WILL_FIRE_RL_outputFIFO_clearReq_canonicalize,
       WILL_FIRE_RL_outputFIFO_deqReq_canonicalize,
       WILL_FIRE_RL_outputFIFO_enqReq_canonicalize,
       WILL_FIRE_RL_pixelextract,
       WILL_FIRE_RL_wordload,
       WILL_FIRE_request_put,
       WILL_FIRE_response_get;

  // inputs to muxes for submodule ports
  wire MUX_processed$write_1__SEL_1;

  // remaining internal signals
  reg [511 : 0] SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313;
  reg [3 : 0] CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q10,
	      CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q11,
	      CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q12,
	      CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q7,
	      CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q8,
	      CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q9,
	      CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4,
	      CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3,
	      CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2,
	      CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1,
	      CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6,
	      CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5;
  wire [511 : 0] IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27;
  wire [23 : 0] IF_outputFIFO_enqReq_wires_1_whas__55_THEN_out_ETC___d178;
  wire [15 : 0] SEL_ARR_outputFIFO_data_0_39_BITS_23_TO_20_40__ETC___d458;
  wire [4 : 0] _theResult_____2__h9172,
	       next_deqP___1__h9577,
	       v__h6413,
	       v__h6772;
  wire [3 : 0] x__h50200;
  wire IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d73,
       IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d76,
       IF_NOT_inputFIFO_enqReq_virtual_reg_2_read__1__ETC___d80,
       IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__1_ETC___d222,
       IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__1_ETC___d225,
       IF_NOT_outputFIFO_enqReq_virtual_reg_2_read__0_ETC___d231,
       IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39,
       IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13,
       IF_outputFIFO_enqReq_wires_1_whas__55_THEN_out_ETC___d164,
       _theResult_____2__h21049,
       inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72,
       next_deqP___1__h21454,
       outputFIFO_clearReq_virtual_reg_1_read__99_OR__ETC___d203,
       v__h16916,
       v__h17275;

  // action method request_put
  assign RDY_request_put = !inputFIFO_full ;
  assign CAN_FIRE_request_put = !inputFIFO_full ;
  assign WILL_FIRE_request_put = EN_request_put ;

  // actionvalue method response_get
  assign response_get =
	     { SEL_ARR_outputFIFO_data_0_39_BITS_23_TO_20_40__ETC___d458,
	       CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q11,
	       CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q12 } ;
  assign RDY_response_get = !outputFIFO_empty ;
  assign CAN_FIRE_response_get = !outputFIFO_empty ;
  assign WILL_FIRE_response_get = EN_response_get ;

  // submodule inputFIFO_clearReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_clearReq_virtual_reg_0(.CLK(CLK),
							    .D_IN(inputFIFO_clearReq_virtual_reg_0$D_IN),
							    .EN(inputFIFO_clearReq_virtual_reg_0$EN),
							    .Q_OUT());

  // submodule inputFIFO_clearReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_clearReq_virtual_reg_1(.CLK(CLK),
							    .D_IN(inputFIFO_clearReq_virtual_reg_1$D_IN),
							    .EN(inputFIFO_clearReq_virtual_reg_1$EN),
							    .Q_OUT(inputFIFO_clearReq_virtual_reg_1$Q_OUT));

  // submodule inputFIFO_deqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_deqReq_virtual_reg_0(.CLK(CLK),
							  .D_IN(inputFIFO_deqReq_virtual_reg_0$D_IN),
							  .EN(inputFIFO_deqReq_virtual_reg_0$EN),
							  .Q_OUT());

  // submodule inputFIFO_deqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_deqReq_virtual_reg_1(.CLK(CLK),
							  .D_IN(inputFIFO_deqReq_virtual_reg_1$D_IN),
							  .EN(inputFIFO_deqReq_virtual_reg_1$EN),
							  .Q_OUT());

  // submodule inputFIFO_deqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_deqReq_virtual_reg_2(.CLK(CLK),
							  .D_IN(inputFIFO_deqReq_virtual_reg_2$D_IN),
							  .EN(inputFIFO_deqReq_virtual_reg_2$EN),
							  .Q_OUT(inputFIFO_deqReq_virtual_reg_2$Q_OUT));

  // submodule inputFIFO_enqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_enqReq_virtual_reg_0(.CLK(CLK),
							  .D_IN(inputFIFO_enqReq_virtual_reg_0$D_IN),
							  .EN(inputFIFO_enqReq_virtual_reg_0$EN),
							  .Q_OUT());

  // submodule inputFIFO_enqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_enqReq_virtual_reg_1(.CLK(CLK),
							  .D_IN(inputFIFO_enqReq_virtual_reg_1$D_IN),
							  .EN(inputFIFO_enqReq_virtual_reg_1$EN),
							  .Q_OUT());

  // submodule inputFIFO_enqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) inputFIFO_enqReq_virtual_reg_2(.CLK(CLK),
							  .D_IN(inputFIFO_enqReq_virtual_reg_2$D_IN),
							  .EN(inputFIFO_enqReq_virtual_reg_2$EN),
							  .Q_OUT(inputFIFO_enqReq_virtual_reg_2$Q_OUT));

  // submodule outputFIFO_clearReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_clearReq_virtual_reg_0(.CLK(CLK),
							     .D_IN(outputFIFO_clearReq_virtual_reg_0$D_IN),
							     .EN(outputFIFO_clearReq_virtual_reg_0$EN),
							     .Q_OUT());

  // submodule outputFIFO_clearReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_clearReq_virtual_reg_1(.CLK(CLK),
							     .D_IN(outputFIFO_clearReq_virtual_reg_1$D_IN),
							     .EN(outputFIFO_clearReq_virtual_reg_1$EN),
							     .Q_OUT(outputFIFO_clearReq_virtual_reg_1$Q_OUT));

  // submodule outputFIFO_deqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_deqReq_virtual_reg_0(.CLK(CLK),
							   .D_IN(outputFIFO_deqReq_virtual_reg_0$D_IN),
							   .EN(outputFIFO_deqReq_virtual_reg_0$EN),
							   .Q_OUT());

  // submodule outputFIFO_deqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_deqReq_virtual_reg_1(.CLK(CLK),
							   .D_IN(outputFIFO_deqReq_virtual_reg_1$D_IN),
							   .EN(outputFIFO_deqReq_virtual_reg_1$EN),
							   .Q_OUT());

  // submodule outputFIFO_deqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_deqReq_virtual_reg_2(.CLK(CLK),
							   .D_IN(outputFIFO_deqReq_virtual_reg_2$D_IN),
							   .EN(outputFIFO_deqReq_virtual_reg_2$EN),
							   .Q_OUT(outputFIFO_deqReq_virtual_reg_2$Q_OUT));

  // submodule outputFIFO_enqReq_virtual_reg_0
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_enqReq_virtual_reg_0(.CLK(CLK),
							   .D_IN(outputFIFO_enqReq_virtual_reg_0$D_IN),
							   .EN(outputFIFO_enqReq_virtual_reg_0$EN),
							   .Q_OUT());

  // submodule outputFIFO_enqReq_virtual_reg_1
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_enqReq_virtual_reg_1(.CLK(CLK),
							   .D_IN(outputFIFO_enqReq_virtual_reg_1$D_IN),
							   .EN(outputFIFO_enqReq_virtual_reg_1$EN),
							   .Q_OUT());

  // submodule outputFIFO_enqReq_virtual_reg_2
  RevertReg #(.width(32'd1),
	      .init(1'd0)) outputFIFO_enqReq_virtual_reg_2(.CLK(CLK),
							   .D_IN(outputFIFO_enqReq_virtual_reg_2$D_IN),
							   .EN(outputFIFO_enqReq_virtual_reg_2$EN),
							   .Q_OUT(outputFIFO_enqReq_virtual_reg_2$Q_OUT));

  // rule RL_wordload
  assign CAN_FIRE_RL_wordload = inputFIFO_deqReq_wires_0$whas ;
  assign WILL_FIRE_RL_wordload = inputFIFO_deqReq_wires_0$whas ;

  // rule RL_pixelextract
  assign CAN_FIRE_RL_pixelextract = outputFIFO_enqReq_wires_0$whas ;
  assign WILL_FIRE_RL_pixelextract = outputFIFO_enqReq_wires_0$whas ;

  // rule RL_inputFIFO_canonicalize
  assign CAN_FIRE_RL_inputFIFO_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_canonicalize = 1'd1 ;

  // rule RL_inputFIFO_enqReq_canonicalize
  assign CAN_FIRE_RL_inputFIFO_enqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_enqReq_canonicalize = 1'd1 ;

  // rule RL_inputFIFO_deqReq_canonicalize
  assign CAN_FIRE_RL_inputFIFO_deqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_deqReq_canonicalize = 1'd1 ;

  // rule RL_inputFIFO_clearReq_canonicalize
  assign CAN_FIRE_RL_inputFIFO_clearReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_inputFIFO_clearReq_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_canonicalize
  assign CAN_FIRE_RL_outputFIFO_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_enqReq_canonicalize
  assign CAN_FIRE_RL_outputFIFO_enqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_enqReq_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_deqReq_canonicalize
  assign CAN_FIRE_RL_outputFIFO_deqReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_deqReq_canonicalize = 1'd1 ;

  // rule RL_outputFIFO_clearReq_canonicalize
  assign CAN_FIRE_RL_outputFIFO_clearReq_canonicalize = 1'd1 ;
  assign WILL_FIRE_RL_outputFIFO_clearReq_canonicalize = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_processed$write_1__SEL_1 =
	     WILL_FIRE_RL_pixelextract && pixel_count == 4'd15 ;

  // inlined wires
  assign inputFIFO_enqReq_wires_0$wget = { 1'd1, request_put } ;
  assign inputFIFO_deqReq_wires_0$whas = !inputFIFO_empty && processed ;
  assign outputFIFO_enqReq_wires_0$wget =
	     { 1'd1,
	       CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1,
	       CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2,
	       CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3,
	       CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4,
	       CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5,
	       CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 } ;
  assign outputFIFO_enqReq_wires_0$whas = !outputFIFO_full && !processed ;
  assign outputFIFO_deqReq_ignored_wires_2$wget =
	     EN_response_get || outputFIFO_deqReq_ehrReg ;

  // register inputFIFO_clearReq_ehrReg
  assign inputFIFO_clearReq_ehrReg$D_IN = 1'd0 ;
  assign inputFIFO_clearReq_ehrReg$EN = 1'd1 ;

  // register inputFIFO_data_0
  assign inputFIFO_data_0$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_0$EN =
	     inputFIFO_enqP == 5'd0 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_1
  assign inputFIFO_data_1$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_1$EN =
	     inputFIFO_enqP == 5'd1 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_10
  assign inputFIFO_data_10$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_10$EN =
	     inputFIFO_enqP == 5'd10 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_11
  assign inputFIFO_data_11$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_11$EN =
	     inputFIFO_enqP == 5'd11 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_12
  assign inputFIFO_data_12$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_12$EN =
	     inputFIFO_enqP == 5'd12 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_13
  assign inputFIFO_data_13$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_13$EN =
	     inputFIFO_enqP == 5'd13 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_14
  assign inputFIFO_data_14$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_14$EN =
	     inputFIFO_enqP == 5'd14 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_15
  assign inputFIFO_data_15$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_15$EN =
	     inputFIFO_enqP == 5'd15 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_16
  assign inputFIFO_data_16$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_16$EN =
	     inputFIFO_enqP == 5'd16 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_17
  assign inputFIFO_data_17$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_17$EN =
	     inputFIFO_enqP == 5'd17 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_18
  assign inputFIFO_data_18$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_18$EN =
	     inputFIFO_enqP == 5'd18 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_19
  assign inputFIFO_data_19$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_19$EN =
	     inputFIFO_enqP == 5'd19 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_2
  assign inputFIFO_data_2$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_2$EN =
	     inputFIFO_enqP == 5'd2 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_20
  assign inputFIFO_data_20$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_20$EN =
	     inputFIFO_enqP == 5'd20 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_21
  assign inputFIFO_data_21$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_21$EN =
	     inputFIFO_enqP == 5'd21 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_22
  assign inputFIFO_data_22$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_22$EN =
	     inputFIFO_enqP == 5'd22 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_23
  assign inputFIFO_data_23$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_23$EN =
	     inputFIFO_enqP == 5'd23 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_24
  assign inputFIFO_data_24$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_24$EN =
	     inputFIFO_enqP == 5'd24 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_25
  assign inputFIFO_data_25$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_25$EN =
	     inputFIFO_enqP == 5'd25 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_26
  assign inputFIFO_data_26$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_26$EN =
	     inputFIFO_enqP == 5'd26 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_27
  assign inputFIFO_data_27$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_27$EN =
	     inputFIFO_enqP == 5'd27 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_28
  assign inputFIFO_data_28$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_28$EN =
	     inputFIFO_enqP == 5'd28 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_29
  assign inputFIFO_data_29$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_29$EN =
	     inputFIFO_enqP == 5'd29 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_3
  assign inputFIFO_data_3$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_3$EN =
	     inputFIFO_enqP == 5'd3 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_30
  assign inputFIFO_data_30$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_30$EN =
	     inputFIFO_enqP == 5'd30 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_31
  assign inputFIFO_data_31$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_31$EN =
	     inputFIFO_enqP == 5'd31 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_4
  assign inputFIFO_data_4$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_4$EN =
	     inputFIFO_enqP == 5'd4 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_5
  assign inputFIFO_data_5$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_5$EN =
	     inputFIFO_enqP == 5'd5 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_6
  assign inputFIFO_data_6$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_6$EN =
	     inputFIFO_enqP == 5'd6 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_7
  assign inputFIFO_data_7$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_7$EN =
	     inputFIFO_enqP == 5'd7 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_8
  assign inputFIFO_data_8$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_8$EN =
	     inputFIFO_enqP == 5'd8 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_data_9
  assign inputFIFO_data_9$D_IN =
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 ;
  assign inputFIFO_data_9$EN =
	     inputFIFO_enqP == 5'd9 &&
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     !inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ;

  // register inputFIFO_deqP
  assign inputFIFO_deqP$D_IN =
	     (!inputFIFO_clearReq_virtual_reg_1$Q_OUT &&
	      inputFIFO_clearReq_ehrReg) ?
	       5'd0 :
	       _theResult_____2__h9172 ;
  assign inputFIFO_deqP$EN = 1'd1 ;

  // register inputFIFO_deqReq_ehrReg
  assign inputFIFO_deqReq_ehrReg$D_IN = 1'd0 ;
  assign inputFIFO_deqReq_ehrReg$EN = 1'd1 ;

  // register inputFIFO_empty
  assign inputFIFO_empty$D_IN =
	     !inputFIFO_clearReq_virtual_reg_1$Q_OUT &&
	     inputFIFO_clearReq_ehrReg ||
	     IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d73 &&
	     IF_NOT_inputFIFO_enqReq_virtual_reg_2_read__1__ETC___d80 ;
  assign inputFIFO_empty$EN = 1'd1 ;

  // register inputFIFO_enqP
  assign inputFIFO_enqP$D_IN =
	     (!inputFIFO_clearReq_virtual_reg_1$Q_OUT &&
	      inputFIFO_clearReq_ehrReg) ?
	       5'd0 :
	       v__h6413 ;
  assign inputFIFO_enqP$EN = 1'd1 ;

  // register inputFIFO_enqReq_ehrReg
  assign inputFIFO_enqReq_ehrReg$D_IN =
	     513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign inputFIFO_enqReq_ehrReg$EN = 1'd1 ;

  // register inputFIFO_full
  assign inputFIFO_full$D_IN =
	     inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 &&
	     IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d76 ;
  assign inputFIFO_full$EN = 1'd1 ;

  // register outputFIFO_clearReq_ehrReg
  assign outputFIFO_clearReq_ehrReg$D_IN = 1'd0 ;
  assign outputFIFO_clearReq_ehrReg$EN = 1'd1 ;

  // register outputFIFO_data_0
  assign outputFIFO_data_0$D_IN =
	     (outputFIFO_enqReq_virtual_reg_2$Q_OUT ||
	      (outputFIFO_enqReq_wires_0$whas ?
		 !outputFIFO_enqReq_wires_0$wget[24] :
		 !outputFIFO_enqReq_ehrReg[24])) ?
	       { outputFIFO_enqReq_wires_0$whas ?
		   outputFIFO_enqReq_wires_0$wget[23:20] :
		   outputFIFO_enqReq_ehrReg[23:20],
		 outputFIFO_enqReq_wires_0$whas ?
		   outputFIFO_enqReq_wires_0$wget[19:16] :
		   outputFIFO_enqReq_ehrReg[19:16],
		 outputFIFO_enqReq_wires_0$whas ?
		   outputFIFO_enqReq_wires_0$wget[15:12] :
		   outputFIFO_enqReq_ehrReg[15:12],
		 outputFIFO_enqReq_wires_0$whas ?
		   outputFIFO_enqReq_wires_0$wget[11:8] :
		   outputFIFO_enqReq_ehrReg[11:8],
		 outputFIFO_enqReq_wires_0$whas ?
		   outputFIFO_enqReq_wires_0$wget[7:4] :
		   outputFIFO_enqReq_ehrReg[7:4],
		 outputFIFO_enqReq_wires_0$whas ?
		   outputFIFO_enqReq_wires_0$wget[3:0] :
		   outputFIFO_enqReq_ehrReg[3:0] } :
	       IF_outputFIFO_enqReq_wires_1_whas__55_THEN_out_ETC___d178 ;
  assign outputFIFO_data_0$EN =
	     outputFIFO_enqP == 1'd0 &&
	     outputFIFO_clearReq_virtual_reg_1_read__99_OR__ETC___d203 &&
	     !outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_outputFIFO_enqReq_wires_1_whas__55_THEN_out_ETC___d164 ;

  // register outputFIFO_data_1
  assign outputFIFO_data_1$D_IN = outputFIFO_data_0$D_IN ;
  assign outputFIFO_data_1$EN =
	     outputFIFO_enqP == 1'd1 &&
	     outputFIFO_clearReq_virtual_reg_1_read__99_OR__ETC___d203 &&
	     !outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	     IF_outputFIFO_enqReq_wires_1_whas__55_THEN_out_ETC___d164 ;

  // register outputFIFO_deqP
  assign outputFIFO_deqP$D_IN =
	     outputFIFO_clearReq_virtual_reg_1_read__99_OR__ETC___d203 &&
	     _theResult_____2__h21049 ;
  assign outputFIFO_deqP$EN = 1'd1 ;

  // register outputFIFO_deqReq_ehrReg
  assign outputFIFO_deqReq_ehrReg$D_IN = 1'd0 ;
  assign outputFIFO_deqReq_ehrReg$EN = 1'd1 ;

  // register outputFIFO_empty
  assign outputFIFO_empty$D_IN =
	     !outputFIFO_clearReq_virtual_reg_1$Q_OUT &&
	     outputFIFO_clearReq_ehrReg ||
	     IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__1_ETC___d222 &&
	     IF_NOT_outputFIFO_enqReq_virtual_reg_2_read__0_ETC___d231 ;
  assign outputFIFO_empty$EN = 1'd1 ;

  // register outputFIFO_enqP
  assign outputFIFO_enqP$D_IN =
	     outputFIFO_clearReq_virtual_reg_1_read__99_OR__ETC___d203 &&
	     v__h16916 ;
  assign outputFIFO_enqP$EN = 1'd1 ;

  // register outputFIFO_enqReq_ehrReg
  assign outputFIFO_enqReq_ehrReg$D_IN = 25'b0101010101010101010101010 ;
  assign outputFIFO_enqReq_ehrReg$EN = 1'd1 ;

  // register outputFIFO_full
  assign outputFIFO_full$D_IN =
	     outputFIFO_clearReq_virtual_reg_1_read__99_OR__ETC___d203 &&
	     IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__1_ETC___d225 ;
  assign outputFIFO_full$EN = 1'd1 ;

  // register pixel_count
  assign pixel_count$D_IN = (pixel_count == 4'd15) ? 4'd0 : x__h50200 ;
  assign pixel_count$EN = outputFIFO_enqReq_wires_0$whas ;

  // register processed
  assign processed$D_IN = MUX_processed$write_1__SEL_1 ;
  assign processed$EN =
	     WILL_FIRE_RL_pixelextract && pixel_count == 4'd15 ||
	     WILL_FIRE_RL_wordload ;

  // register word
  assign word$D_IN =
	     SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313[383:0] ;
  assign word$EN = inputFIFO_deqReq_wires_0$whas ;

  // submodule inputFIFO_clearReq_virtual_reg_0
  assign inputFIFO_clearReq_virtual_reg_0$D_IN = 1'b0 ;
  assign inputFIFO_clearReq_virtual_reg_0$EN = 1'b0 ;

  // submodule inputFIFO_clearReq_virtual_reg_1
  assign inputFIFO_clearReq_virtual_reg_1$D_IN = 1'd0 ;
  assign inputFIFO_clearReq_virtual_reg_1$EN = 1'd1 ;

  // submodule inputFIFO_deqReq_virtual_reg_0
  assign inputFIFO_deqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign inputFIFO_deqReq_virtual_reg_0$EN = inputFIFO_deqReq_wires_0$whas ;

  // submodule inputFIFO_deqReq_virtual_reg_1
  assign inputFIFO_deqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign inputFIFO_deqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule inputFIFO_deqReq_virtual_reg_2
  assign inputFIFO_deqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign inputFIFO_deqReq_virtual_reg_2$EN = 1'd1 ;

  // submodule inputFIFO_enqReq_virtual_reg_0
  assign inputFIFO_enqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign inputFIFO_enqReq_virtual_reg_0$EN = EN_request_put ;

  // submodule inputFIFO_enqReq_virtual_reg_1
  assign inputFIFO_enqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign inputFIFO_enqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule inputFIFO_enqReq_virtual_reg_2
  assign inputFIFO_enqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign inputFIFO_enqReq_virtual_reg_2$EN = 1'd1 ;

  // submodule outputFIFO_clearReq_virtual_reg_0
  assign outputFIFO_clearReq_virtual_reg_0$D_IN = 1'b0 ;
  assign outputFIFO_clearReq_virtual_reg_0$EN = 1'b0 ;

  // submodule outputFIFO_clearReq_virtual_reg_1
  assign outputFIFO_clearReq_virtual_reg_1$D_IN = 1'd0 ;
  assign outputFIFO_clearReq_virtual_reg_1$EN = 1'd1 ;

  // submodule outputFIFO_deqReq_virtual_reg_0
  assign outputFIFO_deqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign outputFIFO_deqReq_virtual_reg_0$EN = EN_response_get ;

  // submodule outputFIFO_deqReq_virtual_reg_1
  assign outputFIFO_deqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign outputFIFO_deqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule outputFIFO_deqReq_virtual_reg_2
  assign outputFIFO_deqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign outputFIFO_deqReq_virtual_reg_2$EN = 1'd1 ;

  // submodule outputFIFO_enqReq_virtual_reg_0
  assign outputFIFO_enqReq_virtual_reg_0$D_IN = 1'd0 ;
  assign outputFIFO_enqReq_virtual_reg_0$EN = outputFIFO_enqReq_wires_0$whas ;

  // submodule outputFIFO_enqReq_virtual_reg_1
  assign outputFIFO_enqReq_virtual_reg_1$D_IN = 1'b0 ;
  assign outputFIFO_enqReq_virtual_reg_1$EN = 1'b0 ;

  // submodule outputFIFO_enqReq_virtual_reg_2
  assign outputFIFO_enqReq_virtual_reg_2$D_IN = 1'd0 ;
  assign outputFIFO_enqReq_virtual_reg_2$EN = 1'd1 ;

  // remaining internal signals
  assign IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d73 =
	     _theResult_____2__h9172 == v__h6413 ;
  assign IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d76 =
	     IF_NOT_inputFIFO_deqReq_virtual_reg_2_read__0__ETC___d73 &&
	     (!inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 ||
	      inputFIFO_full) ;
  assign IF_NOT_inputFIFO_enqReq_virtual_reg_2_read__1__ETC___d80 =
	     (!inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13) ?
	       inputFIFO_empty :
	       !inputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	       IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39 ||
	       inputFIFO_empty ;
  assign IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__1_ETC___d222 =
	     _theResult_____2__h21049 == v__h16916 ;
  assign IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__1_ETC___d225 =
	     IF_NOT_outputFIFO_deqReq_virtual_reg_2_read__1_ETC___d222 &&
	     (!outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_outputFIFO_enqReq_wires_1_whas__55_THEN_out_ETC___d164 ||
	      outputFIFO_full) ;
  assign IF_NOT_outputFIFO_enqReq_virtual_reg_2_read__0_ETC___d231 =
	     (!outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_outputFIFO_enqReq_wires_1_whas__55_THEN_out_ETC___d164) ?
	       outputFIFO_empty :
	       !outputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	       outputFIFO_deqReq_ignored_wires_2$wget ||
	       outputFIFO_empty ;
  assign IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39 =
	     inputFIFO_deqReq_wires_0$whas || inputFIFO_deqReq_ehrReg ;
  assign IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13 =
	     EN_request_put ?
	       inputFIFO_enqReq_wires_0$wget[512] :
	       inputFIFO_enqReq_ehrReg[512] ;
  assign IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d27 =
	     EN_request_put ?
	       inputFIFO_enqReq_wires_0$wget[511:0] :
	       inputFIFO_enqReq_ehrReg[511:0] ;
  assign IF_outputFIFO_enqReq_wires_1_whas__55_THEN_out_ETC___d164 =
	     outputFIFO_enqReq_wires_0$whas ?
	       outputFIFO_enqReq_wires_0$wget[24] :
	       outputFIFO_enqReq_ehrReg[24] ;
  assign IF_outputFIFO_enqReq_wires_1_whas__55_THEN_out_ETC___d178 =
	     outputFIFO_enqReq_wires_0$whas ?
	       outputFIFO_enqReq_wires_0$wget[23:0] :
	       outputFIFO_enqReq_ehrReg[23:0] ;
  assign SEL_ARR_outputFIFO_data_0_39_BITS_23_TO_20_40__ETC___d458 =
	     { CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q7,
	       CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q8,
	       CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q9,
	       CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q10 } ;
  assign _theResult_____2__h21049 =
	     (!outputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	      outputFIFO_deqReq_ignored_wires_2$wget) ?
	       next_deqP___1__h21454 :
	       outputFIFO_deqP ;
  assign _theResult_____2__h9172 =
	     (!inputFIFO_deqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_deqReq_wires_1_whas__3_THEN_input_ETC___d39) ?
	       next_deqP___1__h9577 :
	       inputFIFO_deqP ;
  assign inputFIFO_clearReq_virtual_reg_1_read__8_OR_IF_ETC___d72 =
	     inputFIFO_clearReq_virtual_reg_1$Q_OUT ||
	     !inputFIFO_clearReq_ehrReg ;
  assign next_deqP___1__h21454 = outputFIFO_deqP + 1'd1 ;
  assign next_deqP___1__h9577 =
	     (inputFIFO_deqP == 5'd31) ? 5'd0 : inputFIFO_deqP + 5'd1 ;
  assign outputFIFO_clearReq_virtual_reg_1_read__99_OR__ETC___d203 =
	     outputFIFO_clearReq_virtual_reg_1$Q_OUT ||
	     !outputFIFO_clearReq_ehrReg ;
  assign v__h16916 =
	     (!outputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_outputFIFO_enqReq_wires_1_whas__55_THEN_out_ETC___d164) ?
	       v__h17275 :
	       outputFIFO_enqP ;
  assign v__h17275 = outputFIFO_enqP + 1'd1 ;
  assign v__h6413 =
	     (!inputFIFO_enqReq_virtual_reg_2$Q_OUT &&
	      IF_inputFIFO_enqReq_wires_1_whas_THEN_inputFIF_ETC___d13) ?
	       v__h6772 :
	       inputFIFO_enqP ;
  assign v__h6772 = (inputFIFO_enqP == 5'd31) ? 5'd0 : inputFIFO_enqP + 5'd1 ;
  assign x__h50200 = pixel_count + 4'd1 ;
  always@(pixel_count or word)
  begin
    case (pixel_count)
      4'd0:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[23:20];
      4'd1:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[47:44];
      4'd2:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[71:68];
      4'd3:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[95:92];
      4'd4:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[119:116];
      4'd5:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[143:140];
      4'd6:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[167:164];
      4'd7:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[191:188];
      4'd8:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[215:212];
      4'd9:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[239:236];
      4'd10:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[263:260];
      4'd11:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[287:284];
      4'd12:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[311:308];
      4'd13:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[335:332];
      4'd14:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[359:356];
      4'd15:
	  CASE_pixel_count_0_word_BITS_23_TO_20_1_word_B_ETC__q1 =
	      word[383:380];
    endcase
  end
  always@(pixel_count or word)
  begin
    case (pixel_count)
      4'd0:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[19:16];
      4'd1:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[43:40];
      4'd2:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[67:64];
      4'd3:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[91:88];
      4'd4:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[115:112];
      4'd5:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[139:136];
      4'd6:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[163:160];
      4'd7:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[187:184];
      4'd8:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[211:208];
      4'd9:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[235:232];
      4'd10:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[259:256];
      4'd11:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[283:280];
      4'd12:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[307:304];
      4'd13:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[331:328];
      4'd14:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[355:352];
      4'd15:
	  CASE_pixel_count_0_word_BITS_19_TO_16_1_word_B_ETC__q2 =
	      word[379:376];
    endcase
  end
  always@(pixel_count or word)
  begin
    case (pixel_count)
      4'd0:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[15:12];
      4'd1:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[39:36];
      4'd2:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[63:60];
      4'd3:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[87:84];
      4'd4:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[111:108];
      4'd5:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[135:132];
      4'd6:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[159:156];
      4'd7:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[183:180];
      4'd8:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[207:204];
      4'd9:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[231:228];
      4'd10:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[255:252];
      4'd11:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[279:276];
      4'd12:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[303:300];
      4'd13:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[327:324];
      4'd14:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[351:348];
      4'd15:
	  CASE_pixel_count_0_word_BITS_15_TO_12_1_word_B_ETC__q3 =
	      word[375:372];
    endcase
  end
  always@(pixel_count or word)
  begin
    case (pixel_count)
      4'd0:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 = word[11:8];
      4'd1:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[35:32];
      4'd2:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[59:56];
      4'd3:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[83:80];
      4'd4:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[107:104];
      4'd5:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[131:128];
      4'd6:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[155:152];
      4'd7:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[179:176];
      4'd8:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[203:200];
      4'd9:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[227:224];
      4'd10:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[251:248];
      4'd11:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[275:272];
      4'd12:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[299:296];
      4'd13:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[323:320];
      4'd14:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[347:344];
      4'd15:
	  CASE_pixel_count_0_word_BITS_11_TO_8_1_word_BI_ETC__q4 =
	      word[371:368];
    endcase
  end
  always@(pixel_count or word)
  begin
    case (pixel_count)
      4'd0:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 = word[7:4];
      4'd1:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[31:28];
      4'd2:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[55:52];
      4'd3:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[79:76];
      4'd4:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[103:100];
      4'd5:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[127:124];
      4'd6:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[151:148];
      4'd7:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[175:172];
      4'd8:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[199:196];
      4'd9:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[223:220];
      4'd10:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[247:244];
      4'd11:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[271:268];
      4'd12:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[295:292];
      4'd13:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[319:316];
      4'd14:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[343:340];
      4'd15:
	  CASE_pixel_count_0_word_BITS_7_TO_4_1_word_BIT_ETC__q5 =
	      word[367:364];
    endcase
  end
  always@(pixel_count or word)
  begin
    case (pixel_count)
      4'd0:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 = word[3:0];
      4'd1:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[27:24];
      4'd2:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[51:48];
      4'd3:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[75:72];
      4'd4:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[99:96];
      4'd5:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[123:120];
      4'd6:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[147:144];
      4'd7:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[171:168];
      4'd8:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[195:192];
      4'd9:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[219:216];
      4'd10:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[243:240];
      4'd11:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[267:264];
      4'd12:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[291:288];
      4'd13:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[315:312];
      4'd14:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[339:336];
      4'd15:
	  CASE_pixel_count_0_word_BITS_3_TO_0_1_word_BIT_ETC__q6 =
	      word[363:360];
    endcase
  end
  always@(inputFIFO_deqP or
	  inputFIFO_data_0 or
	  inputFIFO_data_1 or
	  inputFIFO_data_2 or
	  inputFIFO_data_3 or
	  inputFIFO_data_4 or
	  inputFIFO_data_5 or
	  inputFIFO_data_6 or
	  inputFIFO_data_7 or
	  inputFIFO_data_8 or
	  inputFIFO_data_9 or
	  inputFIFO_data_10 or
	  inputFIFO_data_11 or
	  inputFIFO_data_12 or
	  inputFIFO_data_13 or
	  inputFIFO_data_14 or
	  inputFIFO_data_15 or
	  inputFIFO_data_16 or
	  inputFIFO_data_17 or
	  inputFIFO_data_18 or
	  inputFIFO_data_19 or
	  inputFIFO_data_20 or
	  inputFIFO_data_21 or
	  inputFIFO_data_22 or
	  inputFIFO_data_23 or
	  inputFIFO_data_24 or
	  inputFIFO_data_25 or
	  inputFIFO_data_26 or
	  inputFIFO_data_27 or
	  inputFIFO_data_28 or
	  inputFIFO_data_29 or inputFIFO_data_30 or inputFIFO_data_31)
  begin
    case (inputFIFO_deqP)
      5'd0:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_0;
      5'd1:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_1;
      5'd2:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_2;
      5'd3:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_3;
      5'd4:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_4;
      5'd5:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_5;
      5'd6:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_6;
      5'd7:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_7;
      5'd8:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_8;
      5'd9:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_9;
      5'd10:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_10;
      5'd11:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_11;
      5'd12:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_12;
      5'd13:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_13;
      5'd14:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_14;
      5'd15:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_15;
      5'd16:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_16;
      5'd17:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_17;
      5'd18:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_18;
      5'd19:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_19;
      5'd20:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_20;
      5'd21:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_21;
      5'd22:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_22;
      5'd23:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_23;
      5'd24:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_24;
      5'd25:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_25;
      5'd26:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_26;
      5'd27:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_27;
      5'd28:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_28;
      5'd29:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_29;
      5'd30:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_30;
      5'd31:
	  SEL_ARR_inputFIFO_data_0_80_inputFIFO_data_1_8_ETC___d313 =
	      inputFIFO_data_31;
    endcase
  end
  always@(outputFIFO_deqP or outputFIFO_data_0 or outputFIFO_data_1)
  begin
    case (outputFIFO_deqP)
      1'd0:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q7 =
	      outputFIFO_data_0[23:20];
      1'd1:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q7 =
	      outputFIFO_data_1[23:20];
    endcase
  end
  always@(outputFIFO_deqP or outputFIFO_data_0 or outputFIFO_data_1)
  begin
    case (outputFIFO_deqP)
      1'd0:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q8 =
	      outputFIFO_data_0[19:16];
      1'd1:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q8 =
	      outputFIFO_data_1[19:16];
    endcase
  end
  always@(outputFIFO_deqP or outputFIFO_data_0 or outputFIFO_data_1)
  begin
    case (outputFIFO_deqP)
      1'd0:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q9 =
	      outputFIFO_data_0[15:12];
      1'd1:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q9 =
	      outputFIFO_data_1[15:12];
    endcase
  end
  always@(outputFIFO_deqP or outputFIFO_data_0 or outputFIFO_data_1)
  begin
    case (outputFIFO_deqP)
      1'd0:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q10 =
	      outputFIFO_data_0[11:8];
      1'd1:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q10 =
	      outputFIFO_data_1[11:8];
    endcase
  end
  always@(outputFIFO_deqP or outputFIFO_data_0 or outputFIFO_data_1)
  begin
    case (outputFIFO_deqP)
      1'd0:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q11 =
	      outputFIFO_data_0[7:4];
      1'd1:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q11 =
	      outputFIFO_data_1[7:4];
    endcase
  end
  always@(outputFIFO_deqP or outputFIFO_data_0 or outputFIFO_data_1)
  begin
    case (outputFIFO_deqP)
      1'd0:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q12 =
	      outputFIFO_data_0[3:0];
      1'd1:
	  CASE_outputFIFO_deqP_0_outputFIFO_data_0_BITS__ETC__q12 =
	      outputFIFO_data_1[3:0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY 5'd0;
	inputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inputFIFO_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY 5'd0;
	inputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	    513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	inputFIFO_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_empty <= `BSV_ASSIGNMENT_DELAY 1'd1;
	outputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	outputFIFO_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	pixel_count <= `BSV_ASSIGNMENT_DELAY 4'd0;
	processed <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (inputFIFO_clearReq_ehrReg$EN)
	  inputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      inputFIFO_clearReq_ehrReg$D_IN;
	if (inputFIFO_deqP$EN)
	  inputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY inputFIFO_deqP$D_IN;
	if (inputFIFO_deqReq_ehrReg$EN)
	  inputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      inputFIFO_deqReq_ehrReg$D_IN;
	if (inputFIFO_empty$EN)
	  inputFIFO_empty <= `BSV_ASSIGNMENT_DELAY inputFIFO_empty$D_IN;
	if (inputFIFO_enqP$EN)
	  inputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY inputFIFO_enqP$D_IN;
	if (inputFIFO_enqReq_ehrReg$EN)
	  inputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      inputFIFO_enqReq_ehrReg$D_IN;
	if (inputFIFO_full$EN)
	  inputFIFO_full <= `BSV_ASSIGNMENT_DELAY inputFIFO_full$D_IN;
	if (outputFIFO_clearReq_ehrReg$EN)
	  outputFIFO_clearReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      outputFIFO_clearReq_ehrReg$D_IN;
	if (outputFIFO_deqP$EN)
	  outputFIFO_deqP <= `BSV_ASSIGNMENT_DELAY outputFIFO_deqP$D_IN;
	if (outputFIFO_deqReq_ehrReg$EN)
	  outputFIFO_deqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      outputFIFO_deqReq_ehrReg$D_IN;
	if (outputFIFO_empty$EN)
	  outputFIFO_empty <= `BSV_ASSIGNMENT_DELAY outputFIFO_empty$D_IN;
	if (outputFIFO_enqP$EN)
	  outputFIFO_enqP <= `BSV_ASSIGNMENT_DELAY outputFIFO_enqP$D_IN;
	if (outputFIFO_enqReq_ehrReg$EN)
	  outputFIFO_enqReq_ehrReg <= `BSV_ASSIGNMENT_DELAY
	      outputFIFO_enqReq_ehrReg$D_IN;
	if (outputFIFO_full$EN)
	  outputFIFO_full <= `BSV_ASSIGNMENT_DELAY outputFIFO_full$D_IN;
	if (pixel_count$EN)
	  pixel_count <= `BSV_ASSIGNMENT_DELAY pixel_count$D_IN;
	if (processed$EN) processed <= `BSV_ASSIGNMENT_DELAY processed$D_IN;
      end
    if (inputFIFO_data_0$EN)
      inputFIFO_data_0 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_0$D_IN;
    if (inputFIFO_data_1$EN)
      inputFIFO_data_1 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_1$D_IN;
    if (inputFIFO_data_10$EN)
      inputFIFO_data_10 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_10$D_IN;
    if (inputFIFO_data_11$EN)
      inputFIFO_data_11 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_11$D_IN;
    if (inputFIFO_data_12$EN)
      inputFIFO_data_12 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_12$D_IN;
    if (inputFIFO_data_13$EN)
      inputFIFO_data_13 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_13$D_IN;
    if (inputFIFO_data_14$EN)
      inputFIFO_data_14 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_14$D_IN;
    if (inputFIFO_data_15$EN)
      inputFIFO_data_15 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_15$D_IN;
    if (inputFIFO_data_16$EN)
      inputFIFO_data_16 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_16$D_IN;
    if (inputFIFO_data_17$EN)
      inputFIFO_data_17 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_17$D_IN;
    if (inputFIFO_data_18$EN)
      inputFIFO_data_18 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_18$D_IN;
    if (inputFIFO_data_19$EN)
      inputFIFO_data_19 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_19$D_IN;
    if (inputFIFO_data_2$EN)
      inputFIFO_data_2 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_2$D_IN;
    if (inputFIFO_data_20$EN)
      inputFIFO_data_20 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_20$D_IN;
    if (inputFIFO_data_21$EN)
      inputFIFO_data_21 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_21$D_IN;
    if (inputFIFO_data_22$EN)
      inputFIFO_data_22 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_22$D_IN;
    if (inputFIFO_data_23$EN)
      inputFIFO_data_23 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_23$D_IN;
    if (inputFIFO_data_24$EN)
      inputFIFO_data_24 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_24$D_IN;
    if (inputFIFO_data_25$EN)
      inputFIFO_data_25 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_25$D_IN;
    if (inputFIFO_data_26$EN)
      inputFIFO_data_26 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_26$D_IN;
    if (inputFIFO_data_27$EN)
      inputFIFO_data_27 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_27$D_IN;
    if (inputFIFO_data_28$EN)
      inputFIFO_data_28 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_28$D_IN;
    if (inputFIFO_data_29$EN)
      inputFIFO_data_29 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_29$D_IN;
    if (inputFIFO_data_3$EN)
      inputFIFO_data_3 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_3$D_IN;
    if (inputFIFO_data_30$EN)
      inputFIFO_data_30 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_30$D_IN;
    if (inputFIFO_data_31$EN)
      inputFIFO_data_31 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_31$D_IN;
    if (inputFIFO_data_4$EN)
      inputFIFO_data_4 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_4$D_IN;
    if (inputFIFO_data_5$EN)
      inputFIFO_data_5 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_5$D_IN;
    if (inputFIFO_data_6$EN)
      inputFIFO_data_6 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_6$D_IN;
    if (inputFIFO_data_7$EN)
      inputFIFO_data_7 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_7$D_IN;
    if (inputFIFO_data_8$EN)
      inputFIFO_data_8 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_8$D_IN;
    if (inputFIFO_data_9$EN)
      inputFIFO_data_9 <= `BSV_ASSIGNMENT_DELAY inputFIFO_data_9$D_IN;
    if (outputFIFO_data_0$EN)
      outputFIFO_data_0 <= `BSV_ASSIGNMENT_DELAY outputFIFO_data_0$D_IN;
    if (outputFIFO_data_1$EN)
      outputFIFO_data_1 <= `BSV_ASSIGNMENT_DELAY outputFIFO_data_1$D_IN;
    if (word$EN) word <= `BSV_ASSIGNMENT_DELAY word$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inputFIFO_clearReq_ehrReg = 1'h0;
    inputFIFO_data_0 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_1 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_10 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_11 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_12 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_13 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_14 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_15 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_16 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_17 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_18 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_19 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_2 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_20 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_21 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_22 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_23 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_24 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_25 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_26 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_27 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_28 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_29 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_3 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_30 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_31 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_4 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_5 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_6 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_7 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_8 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_data_9 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_deqP = 5'h0A;
    inputFIFO_deqReq_ehrReg = 1'h0;
    inputFIFO_empty = 1'h0;
    inputFIFO_enqP = 5'h0A;
    inputFIFO_enqReq_ehrReg =
	513'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inputFIFO_full = 1'h0;
    outputFIFO_clearReq_ehrReg = 1'h0;
    outputFIFO_data_0 = 24'hAAAAAA;
    outputFIFO_data_1 = 24'hAAAAAA;
    outputFIFO_deqP = 1'h0;
    outputFIFO_deqReq_ehrReg = 1'h0;
    outputFIFO_empty = 1'h0;
    outputFIFO_enqP = 1'h0;
    outputFIFO_enqReq_ehrReg = 25'h0AAAAAA;
    outputFIFO_full = 1'h0;
    pixel_count = 4'hA;
    processed = 1'h0;
    word =
	384'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkDeserializerWTP

