// Automatically generated by: ::SceMiMsg
// DO NOT EDIT
// C++ Class with SceMi Message passing for Bluespec type:  ProcTypes::CpuToHostData
// Generated on: Wed Mar 16 01:34:19 EDT 2016
// Bluespec version: 2014.07.A 2014-07-30 34078

#pragma once

#include "bsv_scemi.h"
#include "CpuToHostType.h"

/// C++ class representing the hardware structure ProcTypes::CpuToHostData
/// This class has been automatically generated.
class CpuToHostData : public BSVType {
 public:
  BitT<16> m_data ;
  CpuToHostType m_c2hType ;

  /// A default constructor
  CpuToHostData ()
    :  m_data()
    , m_c2hType()
  {}

  /// Constructor for object from a SceMiMessageData object
  /// @param msg -- the scemi message object
  /// @param off -- the starting bit offset, updated to next bit position
  CpuToHostData ( const SceMiMessageDataInterface *msg, unsigned int &off )
    : m_data(msg, off)
    , m_c2hType(msg, off)
  {}

  /// Converts this object into its bit representation for sending as a SceMi message
  /// @param msg -- the message object written into
  /// @param off -- bit position off set in message
  /// @return next free bit position for writing
  unsigned int setMessageData (SceMiMessageDataInterface &msg, const unsigned int off=0) const {
    unsigned int running = off;
    running = m_data.setMessageData( msg, running );
    running = m_c2hType.setMessageData( msg, running );
    if (running != off + 18 ) {
      std::cerr << "Mismatch in sizes: " << std::dec <<  running << " vs " << (off + 18) << std::endl;
    }
    return running;
  }

  /// overload the put-to operator for CpuToHostData
  friend std::ostream & operator<< (std::ostream &os, const CpuToHostData &obj) {
    BSVType::PutTo * override = lookupPutToOverride ( obj.getClassName() );
    if ( override != 0 ) {
       return override(os, obj );
    }
    os << "{" ;
    os << "c2hType " << obj.m_c2hType ;os << " " ;
    os << "data " << obj.m_data ;os << "}" ;
    return os;
  }

  /// Adds to the stream the bit representation of this structure object
  /// @param os -- the ostream object which to append
  /// @return the ostream object
  virtual std::ostream & getBitString (std::ostream & os) const {
    m_c2hType.getBitString (os);
    m_data.getBitString (os);
  return os;
  }
  

  /// Accessor for the BSVType name for this object
  /// @param os -- the ostream object which to append
  /// @return the ostream object
  virtual std::ostream & getBSVType (std::ostream & os) const {
    os << "ProcTypes::CpuToHostData" ;
    return os;
  }

  /// Accessor on the size of the object in bits
  /// @return the bit size
  virtual unsigned int getBitSize () const {
    return 18;
  }

  /// returns the class name for this object
  virtual const char * getClassName() const {
    return "CpuToHostData" ;
  }

  /// returns the BSVKind for this object
  virtual BSVKind getKind() const {
    return BSV_Struct ;
  }

  /// Accessor for the count of members in object
  virtual unsigned int getMemberCount() const {
    return 2;
  };
  
  /// Accessor to member objects
  /// @param idx -- member index
  /// @return BSVType * to this object or null
  virtual BSVType * getMember (unsigned int idx) {
    switch (idx) {
      case 0: return & m_c2hType;
      case 1: return & m_data;
      default: std::cerr << "Index error in getMember for class CpuToHostData" << std::endl ;
    };
    return 0;
  };
  
  /// Accessor for symbolic member names
  /// @param idx -- member index
  /// @return char* to this name or null
  virtual const char * getMemberName (unsigned int idx) const {
    switch (idx) {
      case 0: return "c2hType";
      case 1: return "data";
      default: std::cerr << "Index error in getMemberName for class CpuToHostData" << std::endl ;
    };
    return 0;
  };
  
  
};

